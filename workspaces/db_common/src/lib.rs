use tabled::{builder::Builder, Style};
use std::process::exit;
use clap::ArgMatches;

// pub mod config;
pub const CONFIG_DIR: &str = "~/.config/ptdb/";
pub const ENGAGEMENTS_DIR: &str = "~/.config/ptdb/engagements";
pub const ENGAGEMENT_ADR: &str = "~/.config/ptdb/engagement.toml";
// "~/.local/share/ptdb/parsers/"
// pub const PARSERS_DIR: &str = "/etc/ptdb/parsers/";
pub const PARSERS_DIR: &str = "~/Code/misc/PenTestDB/configs/etc/ptdb/parsers/";
pub const MAKE_SQL_DB: &str = "/etc/ptdb/make-db.sql";
// pub const DB_DIR: &str = "~/.config/ptdb/db-servers";
// pub const DB_ADR: &str = config::DB_SERVER_ADR;  // "~/.config/ptdb/db-server.toml";

pub fn console_log(mesg: &str, quiet: bool) {
    if !mesg.is_empty() && !quiet {
        println!("{}", mesg);
        // eprintln!("{}", mesg);
    };
}

pub fn get_as_str(matches: &ArgMatches, option: &str, alt: Option<&str>) -> String {
    // matches.get_one::<String>(option).cloned()
    match matches.get_one::<String>(option) {
        Some(columns) => columns.clone(),
        None => match alt {
            Some(alt_text) => alt_text.to_string(),
            None => {
                eprintln!("The argument, \"{}\", is required in this context but was not present. please try again.", option);
                exit(1);
            }
        }
    }
}

pub fn print_table(table: Builder) -> String {
    let mut data = table.build();
    format!("{}\n({} rows of data)", data.with(Style::psql()).to_string(), data.count_rows() - 1)
}