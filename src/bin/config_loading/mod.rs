// use config_file::FromConfigFile;
use figment::{
    providers::{Format, Toml},
    Figment,
};
use serde::Deserialize;
// use shellexpand;
use std::collections::HashMap;
use std::path::PathBuf;

#[derive(Deserialize, Debug)]
pub struct SQLConf {
    pub user: String,
    pub host: String,
    pub passwd: Option<String>,
    pub port: String,
    pub ssl: Option<bool>,
    pub cert: Option<String>,
    pub null_val: String,
}

#[derive(Deserialize, Debug)]
pub struct ServerConf {
    pub socket: String,
    pub local_mode: bool,
    pub ssh_mode: bool,
    pub ftp_mode: bool,
    pub parser_dir: Option<String>,
}

#[derive(Deserialize, Debug)]
pub struct ParserConf {
    pub args: Option<Vec<Vec<String>>>,
    pub parser: String,
}

#[derive(Deserialize, Debug)]
pub struct Config {
    pub common_id: Vec<String>,
    pub sql_tables: HashMap<String, String>,
    pub engagement_conf: String,
    pub sql: SQLConf,
    pub server: ServerConf,
    pub parsers: HashMap<String, Vec<ParserConf>>,
    pub overlap: HashMap<String, String>,
}

#[derive(Deserialize, Debug)]
pub struct EngageConf {
    // pub root_dir: PathBuf,
    // pub ports: String,
    // pub dirs: String,
    // pub vulns: String,
    // pub hosts: String,
    // start_date: String,
    // end_date: String,
    // ip_range: Vec<String>,
    pub name: String,
    pub complete: bool,
}

/// gathers global and user configs.
pub fn get_config(global_file: &str) -> Config {
    // return Config::from_config_file(shellexpand::tilde(global_file).to_string()).unwrap();
    return Figment::new()
        .merge(Toml::file(shellexpand::tilde(global_file).to_string()))
        .extract()
        .unwrap();
}

pub fn get_engagement(engage_conf: PathBuf) -> EngageConf {
    // return EngageConf::from_config_file(
    //     shellexpand::tilde(&engage_conf.into_os_string().into_string().unwrap()).to_string(),
    // )
    // .unwrap();
    return Figment::new()
        .merge(Toml::file(
            shellexpand::tilde(&engage_conf.into_os_string().into_string().unwrap()).to_string(),
        ))
        .extract()
        .unwrap();
}
