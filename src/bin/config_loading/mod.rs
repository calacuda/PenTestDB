use config_file::FromConfigFile;
use serde::Deserialize;
use shellexpand;
use std::collections::HashMap;
use std::path::PathBuf;

#[derive(Deserialize, Debug)]
pub struct UsrServerConf {
    local_mode: Option<bool>,
    ssh_mode: Option<bool>,
    ftp_mode: Option<bool>,
    commands: Option<Vec<String>>,
}

#[derive(Deserialize, Debug)]
pub struct UsrSocketsConf {
    server: Option<String>,
    client: Option<String>,
}

#[derive(Deserialize, Debug)]
pub struct UsrConfig {
    sockets: Option<UsrSocketsConf>, // HashMap<String, String>,
    server: Option<UsrServerConf>,
    parsers: Option<HashMap<String, String>>,
}

#[derive(Deserialize, Debug)]
pub struct ServerConf {
    pub socket: String,
    pub local_mode: bool,
    pub ssh_mode: bool,
    pub ftp_mode: bool,
    // pub commands: Vec<String>,
    pub parser_dir: String,
}

#[derive(Deserialize, Debug)]
pub struct Config {
    pub engagement_conf: String,
    pub server: ServerConf,
    pub parsers: HashMap<String, String>,
}

#[derive(Deserialize, Debug)]
pub struct EngageConf {
    pub root_dir: PathBuf,
    pub ports: String,
    pub dirs: String,
    pub vulns: String,
    pub hosts: String,
    pub complete: bool,
}

/// gathers global and user configs.
pub fn get_config(global_file: &str) -> Config {
    return Config::from_config_file(global_file).unwrap();
}

pub fn get_engagement(engage_conf: PathBuf) -> EngageConf {
    return EngageConf::from_config_file(engage_conf).unwrap();
}
