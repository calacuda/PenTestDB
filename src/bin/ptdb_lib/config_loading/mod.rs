// use config_file::FromConfigFile;
use figment::{
    providers::{Format, Toml},
    Figment,
};
use serde::Deserialize;
// use toml::ser;
use serde::Serialize;
use shellexpand;
use std::collections::HashMap;
use std::process::exit;
// use std::path::PathBuf;

#[derive(Deserialize, Serialize, Debug)]
pub struct SQLConf {
    pub user: String,
    pub host: String,
    pub passwd: Option<String>,
    pub port: Option<String>,
    pub ssl_cert: Option<String>,
    pub null_val: String,
    // pub template_db: String,
    pub require_ssl: Option<bool>,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct ServerConf {
    pub socket: String,
    // pub local_mode: bool,
    // pub ssh_mode: bool,
    // pub ftp_mode: bool,
    pub parser_dir: Option<String>,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct ParserConf {
    pub args: Option<Vec<Vec<String>>>,
    pub parser: String,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Config {
    pub host_id: Vec<String>,
    pub port_id: Vec<String>,
    pub sql_tables: HashMap<String, String>,
    // pub engagement_conf: String,
    pub active: bool,
    pub sql: SQLConf,
    pub server: ServerConf,
    pub parsers: HashMap<String, Vec<ParserConf>>,
    pub overlap: HashMap<String, String>,
    pub targets: HashMap<String, String>,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct EngageConf {
    // pub root_dir: PathBuf,
    // pub ports: String,
    // pub dirs: String,
    // pub vulns: String,
    // pub hosts: String,
    // start_date: String,
    // end_date: String,
    // ip_range: Vec<String>,
    pub name: String,
    pub complete: bool,
}

/// gathers global and user configs.
pub fn get_config(global_file: &str) -> Config {
    match Figment::new()
        .merge(Toml::file(shellexpand::tilde(global_file).to_string()))
        .extract() {
            Ok(conf) => conf,
            Err(e) =>  {
                eprintln!("[PTDB ERROR] could not load base config file at: \"{}\",\n - does the file exist?\n - is it formated corectly?", global_file);
                eprintln!("got error:\n{}", e);
                exit(1);
            }
        }
}

pub fn get_engagement(engage_conf: &str) -> EngageConf {
    match Figment::new()
        .merge(Toml::file(shellexpand::tilde(engage_conf).to_string()))
        .extract() {
            Ok(conf) => conf,
            Err(e) => {
                eprintln!("[PTDB ERROR] could not load engagement config file at: \"{}\",\n - does the file exist?\n - is it formated corectly?", engage_conf);
                eprintln!("got error:\n{}", e);
                exit(1);
            }
        }
}
