use std::env::args;
use std::fs::File;
use std::io::Read;
use std::io::{BufReader, Write};
use std::net::Shutdown;
use std::os::unix::net::UnixStream;
use std::process::exit;

mod config_loading;
mod output_parser;

const CONFIG_ADR: &str = "/home/yogurt/Code/misc/PenTestDB/configs/.config/ptdb/config.toml";

fn main() {
    let configs = config_loading::get_config(CONFIG_ADR);
    // let log_f = &args().collect::<Vec<String>>()[1];
    let mut log_f = std::io::stdin();

    // read file.
    // let file = File::open(log_f).unwrap();
    // let mut reader = BufReader::new(file);

    // let mut buf = Vec::new();
    // let _ = reader.read_to_end(&mut buf);
    let mut buf = vec![];
    log_f.read_to_end(&mut buf);

    // println!("stdin => {:#?}", buf);
    // println!("sending");
    // send to server
    send_data(&buf, configs.server.socket);
    // print!("{}", std::str::from_utf8(&buf).unwrap());
}

fn send_data(data: &[u8], server_soc: String) {
    let mut stream = match UnixStream::connect(&server_soc) {
        Ok(stream) => stream,
        Err(_) => {
            println!("[ERROR] couldn't connect to socket at \"{}\"", server_soc);
            println!("Hints:");
            println!(" - Do you have the socket configured corectly?");
            println!(" - Is the server runing?");
            exit(1);
        }
    };

    match stream.write_all(data) {
        Ok(_) => {}
        Err(e) => {
            println!("could not send data to server.");
            println!("[DEBUG] :  {}", e);
            exit(1);
        }
    };

    match stream.shutdown(Shutdown::Write) {
        Ok(_) => {}
        Err(e) => {
            println!("failed to shutdown write access to socket file.");
            println!("program will now hang.");
            println!("[DEBUG] :  {}", e);
        }
    };
}
