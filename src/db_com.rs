use clap::ArgMatches;
use log::error;
use std::process::exit;
use tabled::{builder::Builder, Style};

pub const CONFIG_DIR: &str = "~/.config/ptdb/";
pub const ENGAGEMENTS_DIR: &str = "~/.config/ptdb/engagements";
pub const ENGAGEMENT_ADR: &str = "~/.config/ptdb/engagement.toml";
pub const PARSERS_DIR: &str = "/etc/ptdb/parsers/";
pub const MAKE_SQL_DB: &str = "/etc/ptdb/make-db.sql";

pub fn get_as_str(matches: &ArgMatches, option: &str, alt: Option<&str>) -> String {
    match matches.get_one::<String>(option) {
        Some(columns) => columns.clone(),
        None => match alt {
            Some(alt_text) => alt_text.to_string(),
            None => {
                error!("The argument, \"{}\", is required in this context but was not present. please try again.", option);
                exit(1);
            }
        },
    }
}

pub fn print_table(table: Builder) -> String {
    let mut data = table.build();
    format!(
        "{}\n({} rows of data)",
        data.with(Style::psql()).to_string(),
        data.count_rows() - 1
    )
}
