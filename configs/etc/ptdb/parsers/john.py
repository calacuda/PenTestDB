#!/usr/bin/python3
"""
john_parser.py

paser for the out put of the command: "john <HASH_FILE>".


By: Calacuda | MIT License | Epoch: Aug 5, 2022

TODO's:
    - import whats importable from john_show.py or have that imprt from here. (remove duplicate code)
"""


import re
import sys
from parser_output import ParserOutput, make_str


# num_cracked = "{[0-9]+:[0-9]+} password hashes cracked, {[0-9]+:[0-9]+} left"
end_passwd = "Use the \"--show\" option to display all of the cracked passwords reliably"
start_passwd = "Press 'q' or Ctrl-C to abort, almost any other key for status"
wordlist_re = "^(\-w|\-\-wordlist)(:|=| )(.*$)"
nul = chr(0)
output_data = ParserOutput()

def get_body(lines):
    """gets the john password output, NOT the header or footer."""
    start_i = -1
    end_i= -1
    
    for line, i in zip(lines, range(len(lines))):
        line = line.strip()
        m = re.search(end_passwd, line)
        
        if re.search(start_passwd, line):  # line == "-" * len(line) and line:
            start_i = i + 1  # dont add the "-" line
        elif m:
            end_i = i - 1  # dont add the line that tells you how many passwords were cracked.

    if start_i == -1 or end_i == -1:
        sys.exit(1)

    return [line.strip() for line in lines[start_i:end_i] if line.strip()]


def get_hash_file(cmd):
    """gets the hash file from the command"""
    for token in cmd.split(' ')[1:]:
        if not token.startswith('-') and token != "john":
            return token.strip()


def get_creds(lines):
    """pulls the usernames and passwords data from lines."""
    creds = []

    for line in lines:
        tokens = [l for l in line.split(" ") if l]
        uname = tokens[1][1:-1]  # [1:-1] removes the parenthesis arround the username
        pword = tokens[0]  
        creds.append((uname, pword))

    return creds 


def get_wordlist(cmd):
    """retreives the wordlist from the command"""
    args = [tok.strip() for tok in cmd.split(' ') if tok.startswith('-')]
    for arg in args:
        m = re.search(wordlist_re, arg)
        if m:
            return m.group(3)
        

def make_output(hash_f, wordlist, creds):
    """makes and output string that can be printed directly"""
    for uname, pword in creds:
        data = {
            "hash_file": make_str(hash_f),
            "wordlist": make_str(wordlist),
            "username": make_str(uname),
            "password": make_str(pword),
        }
        output_data.add_credential(data)


def main(stdin):
    cmd = stdin[0].strip()
    lines = stdin[1:]
    hash_f = get_hash_file(cmd)
    wordlist = get_wordlist(cmd)
    passwd_lines = get_body(lines)
    creds = get_creds(passwd_lines)
    make_output(hash_f, wordlist, creds)
    
    return output_data


if __name__ == "__main__":
    print(main(sys.stdin.readlines()))

