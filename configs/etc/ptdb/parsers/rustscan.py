#!/usr/bin/python3
"""
nmap-parser.py

parser for basic rustscan commands (NOT including the nmap output, (not yet at least))


Author: Calacuda | MIT Licence | Epoch: Jul 30, 2022
"""

import re
import sys
folder = "/".join(__file__.split("/")[0:-1])
sys.path.append(folder)
import base_nmap as nmap
# nmap = imp.load_source('nmap', f"{folder}/base-nmap.parser")



stdin = sys.stdin
ipv4_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
ipv6_re = "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
ports_re = "Open \[(.*)\]:([0-9]{1,5})"
ports_re_2 = f"Open ({ipv4_re}):([0-9]" + "{1,5})"
nul = chr(0)

def get_ports(full_report):
    ports = {}
    for line in full_report:
        if line.startswith("[>] Running script \"nmap"):
            break
        m = re.search(ports_re, line)
        m_2 = re.search(ports_re_2, line)
        if m:
            target = m.group(1)
            if not ports.get(target):
                ports[target] = []
            ports[target].append(m.group(2))
        elif m_2:
            target = m_2.group(1)
            if not ports.get(target):
                ports[target] = []
            ports[target].append(m_2.group(6))

    return ports


def output_ports(ports):
    final = ""

    for key in ports.keys():
        output = f"{nul}'{key}'"
        if re.match(ipv4_re, key):
            output = "ip"+output
        elif re.match(ipv6_re, key):
            output = "ipv6"+output
        else:
            output = "dns_name"+output
        final += ''.join([f"{output}{nul}port{nul}'{port}'{nul}state{nul}'open'\n" for port in ports.get(key)])
    return final[0:-1]


def get_nmap(full_scan):
    deliminators = {True: "[~] Starting Nmap ", False: "[~] Starting Script(s)"}
    start_stop = []
    switch = True
    for i in range(len(full_scan)):
        line = full_scan[i]
        if line.startswith(deliminators.get(switch)):
            start_stop.append(i)
            switch = not switch


    scans = []
    for i in range(len(start_stop)):
        line_num = start_stop[i]
        if i is not len(start_stop) - 1:
            [scans.append(line) for line in full_scan[line_num:start_stop[i+1]]]
        else:
            break

    return scans


def main():
    full_report = stdin.readlines()
    cmd = full_report[0].strip()
    full_report = full_report[1:]
    ports = get_ports(full_report)
    # print(ports)
    ports = output_ports(ports)
    # print("+++++++")
    nmap_output = cmd + "\n" + ''.join(get_nmap(full_report))
    parsed_namp = nmap.main(nmap_output.split("\n"))
    if parsed_namp and ports:
        # print()
        print(ports)
        print(parsed_namp[0:-1], end="")
    elif ports:
        print(ports, end="")
    elif parsed_namp:
        print(parsed_namp, end="")
    # output_nmap(nmap, )


main()
