#!/usr/bin/python3
"""
hydra-parser.py

parser for hydra commands.


Author: Calacuda | MIT License | Epoch: Oct 6, 2022
"""


from sys import stdin
import re
import sys
folder = "/".join(__file__.split("/")[0:-1])
sys.path.append(folder)
from parser_output import ParserOutput, escape_ansi, make_str


ipv4_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
ipv6_re = "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"

nul = chr(0)

output_data = ParserOutput()


# def get_answer_section(lines):
#     answers = []
#     adding = False

#     for line in lines:
#         if adding and line.startswith(";;"):
#             break
#         elif adding:
#             answers.append(line)

#         if line.startswith(";; ANSWER SECTION:"):
#             adding = True

#     return answers


def parse_answers(answers, dns_name):
    parsed = []

    for answer in answers:
        tokens = [tok.strip() for tok in answer.split() if tok.strip()]

        if len(tokens) == 0:
            continue

        # dns_name = tokens[0]
        m = re.search(ipv4_re, answer)

        if m:
            # print(tokens)
            ip = m.group()
            record_type = tokens[3]
            dns_name = tokens[0][:-1]
            parsed.append((dns_name, record_type, ip))

    return parsed


def get_sections(full_report):
    starts = []
    stops = []

    for i, line in enumerate(full_report):
        if line.startswith(";; QUESTION SECTION:"):
            starts.append(i)
        elif line.startswith(";; Query time:"):
            stops.append(i)

    sections = []

    for start, stop in zip(starts, stops):
        sections.append(full_report[start: stop])

    return sections


def get_dns_name(line):
    return ".".join(line[1:].split(".")[0:-1])


def main(full_report):
    sections = [[line.strip() for line in section if line.strip()] for section in get_sections(full_report)]

    # print(sections)

    for section in sections:
        dns_name = get_dns_name(section[1])
        parsed = parse_answers(section[3:], dns_name)
        
        for (dns_name, record_type, adr) in parsed:
            data = {}
            if record_type != "CNAME":
                machine_uid = output_data.add_machine({"ip" if record_type == "A" else 'ipv6':  make_str(adr)})
                data["dns_name"] = make_str(dns_name)
                data["record_type"] = make_str(record_type)
                output_data.add_dns_name(data, machine_uid=machine_uid)
            else:
                exit(1)


        # [output.append(nul.join([f"{name}{nul}'{val}'" for (name, val) in ans])) for ans in parsed]
        
    return output_data


if __name__ == "__main__":
    print(main(stdin.readlines()), end="")
