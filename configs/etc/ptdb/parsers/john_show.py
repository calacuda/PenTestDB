#!/usr/bin/python3
"""
john_show_parser.py

paser for the out put of the command: "john --show <FILE>".


By: Calacuda | MIT License | Epoch: Aug 5, 2022
"""


import re
import sys


num_cracked = "password hashes cracked, "
nul = chr(0)

def get_body(lines):
    """gets the john password output, NOT the header or footer."""
    start_i = -1
    end_i= -1
    
    for line, i in zip(lines, range(len(lines))):
        line = line.strip()
        m = re.search(num_cracked, line)
        
        if line == "-" * len(line) and line:
            start_i = i + 1  # dont add the "-" line
        elif m:
            end_i = i  # dont add the line that tells you how many passwords were cracked.

    if start_i == -1 or end_i == -1:
        sys.exit(1)

    return [line.strip() for line in lines[start_i:end_i] if line.strip()]


def get_hash_file(cmd):
    """gets the hash file from the command"""
    for token in cmd.split(' ')[1:]:
        if not token.startswith('-') and token != "john":
            return token.strip()


def get_creds(lines):
    """pulls the usernames and passwords data from lines."""
    creds = []

    for line in lines:
        tokens = line.split(":")
        uname = tokens[0]
        pword = tokens[1]
        creds.append((uname, pword))

    return creds


def make_output(hash_f, creds):
    """makes and output string that can be printed directly"""
    base = f"hash_file{nul}'{hash_f}'{nul}"
    final = ""
    
    for uname, pword in creds:
        line = f"{base}username{nul}'{uname}'{nul}password{nul}'{pword}'\n"
        final += line

    return final[:-1]


def main(stdin):
    cmd = stdin[0]
    lines = stdin[1:]
    hash_f = get_hash_file(cmd)
    passwd_lines = get_body(lines)
    creds = get_creds(passwd_lines)
    return make_output(hash_f, creds)


if __name__ == "__main__":
    print(main(sys.stdin.readlines()))

