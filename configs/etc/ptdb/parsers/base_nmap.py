#!/usr/bin/python
"""
nmap-parser.py

parser for basic nmap commands (NOT including vulnerability scans, (not yet at least))


Author: Calacuda | MIT License | Epoch: Jul 30, 2022

TODOs:
 - sometimes during version scans the ip address gets used as the host name, not the ip
   address.
 - 
"""


from sys import stdin
import re
import sys

folder = "/".join(__file__.split("/")[0:-1])
sys.path.append(folder)
from parser_output import ParserOutput


# stdin = sys.stdin
host_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
ports_re = "([0-9]{1,5})/(tcp|udp)[\s]+(open|filtered|closed|open\|filtered)[\s]+(?=\S*['-/]*)([a-zA-Z'-/\?]+)(.*$)"
nul = chr(0)
output_data = ParserOutput()

def get_host_lines(lines: list):
    host_nums = []
    for i in range(len(lines)):
        if lines[i].startswith("Nmap scan report for "):
            host_nums.append(i)

    return host_nums


def hosts_reports(lines, line_nums):
    # print(f"{lines=}")
    reports = []
    for i, l_num in zip(range(len(line_nums)), line_nums):
        if len(line_nums) - i > 1:
            reports.append(lines[l_num:line_nums[i+1]])
        elif len(line_nums) - i <= 1:
            reports.append(lines[l_num:])

    return reports


def get_ip(host):
    ip = ""
    for line in host:
        m = re.search(host_re, line)
        if m:
            ip = f"'{m.group()}'"
            break

    return ip, "ip" if ip.count(".") == 3 else "ipv6"


def get_ports(host):
    ports = []
    for line in host:
        m = re.search(ports_re, line)
        if m:
            p_dat = {}
            p_dat["port"] = m.group(1).strip()
            p_dat["tl_protocol"] = f"'{m.group(2).strip()}'"
            p_dat["state"] = f"'{m.group(3).strip()}'"
            p_dat["service"] = f"'{m.group(4).strip()}'"
            # p_dat["version"] = line[line.find(m.group(4).strip()) + len(m.group(4)):].strip()
            try:
                if m.group(5).strip().startswith("syn-ack"):
                    ver = m.group(5).replace("syn-ack", "").strip()
                    p_dat["version"] = f"'{ver}'"
                elif m.group(5).strip():
                    p_dat["version"] = f"'{m.group(5).strip()}'"
                # print(m.group(5).strip())
            except IndexError as e:
                pass

            ports.append(p_dat)
            # ports[m.group(1)] = p_dat

    return ports


def get_domain(lines):
    begining = "Nmap scan report for "
    for i in range(len(lines)):
        if lines[i].startswith(begining):
            rest = lines[i][len(begining):]
            name = rest.split(' ')[0]
            m = re.search(host_re, name)
            if not name.endswith('\n') and not m:
                return name


def parse_host(host):
    ip, ip_v = get_ip(host)
    # print("ip : ", ip)
    ports = get_ports(host)
    # print("ports : ", ports)
    domain = get_domain(host)
    # print("domain : ", domain)
    return {ip_v: ip, "ports": ports} if not domain else {ip_v: ip, "ports": ports, "dns_name": f"'{domain}'"}


def store_data(host):
    """outputs a single host"""
    # gather host data (not ports and stuff)
    ports = host.pop("ports")
    dns_name = host.pop("dns_name") if "dns_name" in host else None
    host_data = host 
    # commit host data
    host_uid = output_data.add_machine(host_data)
    # commit port data
    ports_uids = [output_data.add_port(port, machine_uid=host_uid) for port in ports]
    # mod host data to include port data
    output_data.mod_machine(host_uid, {"ports": ports_uids})
    # commit dns_name data
    if dns_name:
        # print(dns_name)
        dns_name_uid = output_data.add_dns_name({"dns_name": dns_name}, machine_uid=host_uid)
        # mod host data to include dns_name data
        output_data.mod_machine(host_uid, {"dns_names": dns_name_uid})


def main(full_report):
    cmd = full_report[0].strip()
    full_report = full_report[1:]
    line_nums = get_host_lines(full_report)
    reports = hosts_reports(full_report, line_nums)
    hosts = []

    for host in reports:
        report = parse_host(host)
        hosts.append(report)

    for host in hosts:
        store_data(host)

    # print(bytes(str(output_data), encoding="ascii"))
    # print(output_data, end="")
    print(output_data)
    # print(output_data.ports.keys())

if __name__ == "__main__":
    # print(main(stdin.readlines())[0:-1], end="")
    main(stdin.readlines())
