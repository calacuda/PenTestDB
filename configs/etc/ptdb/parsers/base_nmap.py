#!/usr/bin/python
"""
nmap-parser.py

parser for bassic nmap commands (NOT including vulnerability scans, (not yet at least))


Author: Calacuda | MIT Licence | Epoch: Jul 30, 2022
"""

import sys
import re



stdin = sys.stdin
host_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
ports_re = "([0-9]{1,5})/(tcp|udp)[\s]+(open|filtered|closed|open\|filtered)[\s]+(?=\S*['-/]*)([a-zA-Z'-/]+)(.*$)"
nul = chr(0)


def get_host_lines(lines: list):
    host_nums = []
    for i in range(len(lines)):
        if lines[i].startswith("Nmap scan report for "):
            host_nums.append(i)


    return host_nums


def hosts_reports(lines, line_nums):
    # print(f"{lines=}")
    reports = []
    for i, l_num in zip(range(len(line_nums)), line_nums):
        if len(line_nums) - i > 1:
            reports.append(lines[l_num:line_nums[i+1]])
        elif len(line_nums) - i <= 1:
            reports.append(lines[l_num:])

    return reports


def get_ip(host):
    # print(host)
    ip = ""
    for line in host:
        m = re.search(host_re, line)
        if m:
            # print(m.pos)
            ip = m.group()
            break

    # print(f"{ip=}")
    return ip


def get_ports(host):
    ports = []
    for line in host:
        m = re.search(ports_re, line)
        if m:
            p_dat = {}
            p_dat["port"] = m.group(1).strip()
            p_dat["TL_protocol"] = m.group(2).strip()
            p_dat["state"] = m.group(3).strip()
            p_dat["service"] = m.group(4).strip()
            # p_dat["version"] = line[line.find(m.group(4).strip()) + len(m.group(4)):].strip()
            try:
                if m.group(5).strip().startswith("syn-ack"):
                    p_dat["version"] = m.group(5).replace("syn-ack", "").strip()
                else:
                    p_dat["version"] = m.group(5).strip()
                # print(m.group(5).strip())
            except IndexError as e:
                pass

            ports.append(p_dat)
            # ports[m.group(1)] = p_dat

    return ports


def get_domain(lines):
    begining = "Nmap scan report for "
    for i in range(len(lines)):
        if lines[i].startswith(begining):
            rest = lines[i][len(begining):]
            name = rest.split(' ')[0]
            if not name.endswith('\n'):
                return name


def parse_host(host):
    ip = get_ip(host)
    # print(ip)
    ports = get_ports(host)
    # print(ports)
    domain = get_domain(host)
    # print(domain)
    return {"ip": ip, "ports": ports} if not domain else {"ip": ip, "ports": ports, "dns_name": domain}


def add_elm(key, value):
    return f"{key}{nul}'{value}'{nul}"


def output(hosts, cmd, full_report):
    # results = "".join([line.replace('\r', '\\r').replace('\n', '\\n') for line in full_report])
    # print(f"cmd{nul}'{cmd}'")  # output{nul}'{results}'")
    final = ""
    for host in hosts:
        info = add_elm("ip", host.get('ip'))
        if host.get("dns_name"):
            info += add_elm("dns_name", host.get('dns_name'))
        ports = host.get('ports')
        for port in ports:
            tmp_info = f"{info}"
            for name in ['port', 'state', 'TL_protocol', 'service', 'version']:
                if port.get(name):
                    tmp_info += add_elm(name, port.get(name))
            if host is hosts[-1] and port is ports[-1]:
                end = ''
            else:
                end = '\n'
            # end = ''
            final += tmp_info[0:-1] + "\n"
            # print("foo")
        # print(info[0:-1], end='\n' if host is not hosts[-1] else '')
    return final


def main(full_report):
    # full_report = stdin.readlines()
    # print("".join(full_report))
    cmd = full_report[0].strip()
    # print("CMD => ", cmd)
    full_report = full_report[1:]
    line_nums = get_host_lines(full_report)
    reports = hosts_reports(full_report, line_nums)

    hosts = []
    for host in reports:
        report = parse_host(host)
        # report["cmd"] = cmd

        hosts.append(report)


    return output(hosts, cmd, full_report)


if __name__ == "__main__":
    print(main(stdin.readlines())[0:-1], end="")
