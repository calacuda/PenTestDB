"""
parser_output.py

contains an object used to generate parser output.

By: Calacuda | MIT License | Epoch: Nov 4, 2022
"""


import re


class ParserOutput:
    def __init__(self):
        self.machines = {}
        self.dns_names = {}
        self.ports = {}
        self.credentials = {}
        self.web_dirs = {}

    def __str__(self):
        final = []

        for things in [self.machines, self.dns_names, self.ports, self.credentials, self.web_dirs]:
            for entity in things.values():
                elms = []
                for var_name, val in entity.items():
                    if type(val) == list:
                        [elms.append(self.make_elm(var_name, tmp_val)) for tmp_val in val]
                    else:
                        elms.append(self.make_elm(var_name, val))

                final.append(chr(0).join(elms))
                # final.append(" ".join(elms))


        return "\n".join(final)

    def make_elm(self, name, elm):
        return f"{name}{chr(0)}{elm}"
        # return f"{name}|{elm}"            
                    

    def add_machine(self, data):
        uid = "_:machine_" + str(len(self.machines))
        data["uid"] = uid
        data["dgraph.type"] = "Machine"
        self.machines[uid] = data
        return uid

    def mod_machine(self, uid, data):
        for var_name, val in data.items():
            if var_name in self.machines and type(self.machines[uid][var_name]) is list and type(val) is list:
                [self.machines[uid][var_name].append(tmp_val) for tmp_val in val]
            elif var_name in self.machines and type(self.machines[uid][var_name]) is list:
                self.machines[uid][var_name].append(val)
            else:
                self.machines[uid][var_name] = val

    def add_port(self, data, machine_uid=None):
        uid = "_:port_" + str(len(self.ports))
        data["uid"] = uid
        data["dgraph.type"] = "Port"
        if machine_uid:
            data["machine"] = machine_uid
        self.ports[uid] = data
        return uid

    def mod_port(self, uid, data):
        for var_name, val in data.items():
            if type(self.ports[uid][var_name]) is list and type(val) is list:
                [self.ports[uid][var_name].append(tmp_val) for tmp_val in val]
            elif type(self.ports[uid][var_name]) is list:
                self.ports[uid][var_name].append(val)
            else:
                self.ports[uid][var_name] = val

    def add_dns_name(self, data, uid=None):
        uid = "_:dns_name_" + str(len(self.dns_names))
        data["uid"] = uid
        data["dgraph.type"] = "DNSName"
        if uid:
            data["machine"] = uid
        self.dns_names[uid] = data
        return uid

    def mod_dns_name(self, uid, data):
        for var_name, val in data.items():
            if type(self.dns_names[uid][var_name]) is list and type(val) is list:
                [self.dns_names[uid][var_name].append(tmp_val) for tmp_val in val]
            elif type(self.dns_names[uid][var_name]) is list:
                self.dns_names[uid][var_name].append(val)
            else:
                self.dns_names[uid][var_name] = val

    def add_credential(self, data):
        uid = "_:cred_" + str(len(self.credentials))
        data["uid"] = uid
        data["dgraph.type"] = "Credential"
        self.credentials[uid] = data
        return uid

    def mod_credential(self, uid, data):
        for var_name, val in data.items():
            if type(self.credentials[uid][var_name]) is list and type(val) is list:
                [self.credentials[uid][var_name].append(tmp_val) for tmp_val in val]
            elif type(self.ports[uid][var_name]) is list:
                self.credentials[uid][var_name].append(val)
            else:
                self.credentials[uid][var_name] = val

    def add_web_dirs(self, data, host_uid=None):
        uid = "_:web_dir_" + str(len(self.web_dirs))
        data["uid"] = uid
        data["dgraph.type"] = "WebDir"
        if host_uid:
            data["machine"] = host_uid
        self.web_dirs[uid] = data
        return uid

    def mod_web_dirs(self, uid, data):
        for var_name, val in data.items():
            if type(self.ports[uid][var_name]) is list and type(val) is list:
                [self.ports[uid][var_name].append(tmp_val) for tmp_val in val]
            elif type(self.ports[uid][var_name]) is list:
                self.ports[uid][var_name].append(val)
            else:
                self.ports[uid][var_name] = val

    def add_data_bulk(self, data):
        # TODO: write this.
        pass

    def add_host(self, data):
        """
        takes data, a dictionary, that represents either a dns name, or a, machine
        with either a mac, ipv4, or ipv6 adr. adds accordingly.
        """
        # TODO: write this.
        pass


def escape_ansi(line):
    ansi_escape = re.compile(r'(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]')
    return ansi_escape.sub('', line)


def make_str(val):
    return f"'{val}'"