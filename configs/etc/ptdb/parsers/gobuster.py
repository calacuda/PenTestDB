#!/usr/bin/python3
"""
gobuster-parser.py

simple parser for gobuster output.


By: Calacuda | MIT License | Epoch: Aug 3rd, 2022,
"""


import re
import sys
import socket

folder = "/".join(__file__.split("/")[0:-1])
sys.path.append(folder)
from parser_output import ParserOutput, make_str


ip_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
nul = chr(0)
output_data = ParserOutput()


def get_from_header(output, start):
    for line in output:
        if line.startswith(start):
            return line.split(' ')[-1].strip()


def get_dirs(output, url, host_uid, common_data):
    dir_lines = [line.strip() for line in output if line.strip().startswith('/')]
    # print(dir_lines)

    for line in dir_lines:
        # remove unwanted items
        line = [l for l in line.split(' ') if l and l != "(Status:" and l != "[Size:" and l != "[-->"]
        # remove trailing parens and square brackets
        line = [l.replace(')', '').replace(']', '') for l in line]
        
        # make the output line. 
        out_line =  {"host": host_uid, "url": make_str(url + line[0]), "dir": make_str(line[0])}
        [out_line.update({key: val}) for key, val in common_data]

        for var_name, value in zip(["res_code", "num_chars", "redirect_adr"], line[1:]):
            # if not var_name.startswith("_"):
            # print("line")
            out_line[var_name] = make_str(value)
        
        output_data.add_web_dirs(out_line)       


def main(output):
    # TODO: parse out ansi escape chars
    target = get_from_header(output, "[+] Url:") 
    target = target if target else get_from_header(output, "[+] Url/Domain   :")
    method = get_from_header(output, "[+] Method:")
    method = method if method else "GET"
    host_name = target.split("://")[1]
    web_protocol = target.split(':')[0]
    host_type = "dns_name" if not re.search(ip_re, host_name) else "ip"  # if ":" not in host_name else "ipv6"
    # prepend_data = {"base_url": target, "method": method, "web_protocol": web_protocol, "host_type": host_name}

    dir_com_dat = {
        "base_url": make_str(target), 
        "web_protocol": make_str(web_protocol), 
        "method": make_str(method), 
        # "dns_name": make_str(host_name.split(":")[0] if ":" in host_name else host_name)
    }

    dns_data = {
        "dns_name": make_str(host_name.split(":")[0] if ":" in host_name else host_name),
        "record_type": make_str(""),
        }

    if host_type != "dns_name":
        # ip = socket.gethostbyname(host_name.split(":")[0] if ":" in host_name else host_name)
        # (ip_v, record_type) = ("ip", "A") if re.search(ip_re, ip) else ("ipv6", "AAAA")
        # machine_id = output_data.add_machine({ip_v: make_str(ip)})
        host_data = {host_type: make_str(host_name.split(":")[0] if ":" in host_name else host_name)}  # IPv6 will screw this up.
        machine_id = output_data.add_machine(host_data)
        # record_type = "A" if re.search(ip_re, ip) else "AAAA"
        dns_data["machine"] = machine_id
        
    # dns_data["record_type"] = make_str(record_type)
    dns_uid = output_data.add_dns_name(dns_data)

    dir_com_dat["dns_name_uid"] = dns_uid
    get_dirs(output, target, dns_uid, dir_com_dat.items())

    
    # store_data(data)
    
    print(output_data)


if __name__ == "__main__":
    main(sys.stdin.readlines())
