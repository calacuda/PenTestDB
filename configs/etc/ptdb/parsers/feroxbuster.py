#!/usr/bin/python3
"""
feroxbuster-parser.py

parser for feroxbuster.


Author: Calacuda | MIT Licence | Epoch: Jul 30, 2022
"""

import sys
import re
import socket
from urllib.parse import urlparse

folder = "/".join(__file__.split("/")[0:-1])
sys.path.append(folder)
from parser_output import ParserOutput, escape_ansi, make_str


stdin = sys.stdin
ip_re = "([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})"
code = "([0-9]{1,3})[\s]+(GET|POST)[\s]+"
nul = chr(0)
output_data = ParserOutput()


def get_target(lines):
    start = " ðŸŽ¯  Target Url            â”‚ "
    start2 = "     Target Url            â”‚ "
    for line in lines:
        if line.startswith(start) or line.startswith(start2):
            return line.split('â”‚ ')[1].strip()


def parse_url(url):
    parsed_url = urlparse(url)
    base_url, web_proto = parsed_url.netloc, parsed_url.scheme

    return (base_url, web_proto)


def parse_lines(lines):
    # host = target_url.split('/')[2].strip()
    # print("host", host)
    # print("base", base)
    base = None

    for line in lines:
        m = re.search(code, line)
        # print(line)
        if m and not line.strip().endswith("--dont-filter"):
            # print(line)
            host_name, web_proto = parse_url([word.strip() for word in line.split(' ') if word][-1].strip())
            
            host_type = "dns_name" if not re.search(ip_re, host_name) else "ip"  # if ":" not in host_name else "ipv6"

            if host_type == "dns_name":
                ip = socket.gethostbyname(host_name.split(":")[0] if ":" in host_name else host_name)
                (ip_v, record_type) = ("ip", "A") if re.search(ip_re, ip) else ("ipv6", "AAAA")
                machine_id = output_data.add_machine({ip_v: make_str(ip)})
                
                # dns_type = "A" if ip_v == "ip" else "AAAA"
                # dns_data = {
                #     "dns_name": make_str(host_name.split(":")[0] if ":" in host_name else host_name), 
                #     "machine": machine_id,
                #     "record_type": dns_type,
                #     }
                # dns_uid = output_data.add_dns_name(dns_data)
            else:
                host_data = {host_type: make_str(host_name.split(":")[0] if ":" in host_name else host_name)}  # IPv6 will screw this up.
                machine_id = output_data.add_machine(host_data)
                record_type = "A" if re.search(ip_re, ip) else "AAAA"
                
                # dns_type = "A" if host_type == "ip" else "AAAA"
                # dns_data = {
                #     "dns_name": make_str(host_name.split(":")[0] if ":" in host_name else host_name), 
                #     "machine": machine_id,
                #     "record_type": dns_type,
                #     }
                # dns_uid = output_data.add_dns_name(dns_data)

            dns_data = {
                "dns_name": make_str(host_name.split(":")[0] if ":" in host_name else host_name), 
                "machine": machine_id,
                "record_type": make_str(record_type),
                }
            dns_uid = output_data.add_dns_name(dns_data)

            base = {
                "base_url": make_str(host_name),
                "web_protocol": make_str(web_proto),
                "dns_name_uid": dns_uid,
            }

            break

    if not base:
        return

    # print("base_url", host_name)
    # print("base", base)

    for line in lines:
        m = re.search(code, line)
        if m and not line.strip().endswith("--dont-filter"):
            info = [word.strip() for word in line.split(' ') if word ]
            res_code = info[0].strip()
            method = info[1].strip()
            url = info[-1].strip()
            chars = info[-2].strip().replace("c", "")
            # try:
            web_dir = url.split(host_name)[1]
            # except IndexError:
            #     print(host_name, url)
            #     exit(1)
            data = {
                "res_code": make_str(res_code), 
                "method": make_str(method), 
                "url": make_str(url), 
                "dir": make_str(web_dir),
                "num_chars": make_str(chars),
                }
            data.update(base)
            output_data.add_web_dirs(data)


def main():
    full_scan = stdin.readlines()
    # print("".join(full_report))
    cmd = full_scan[0].strip()
    # print("CMD => ", cmd)
    full_report = [escape_ansi(line) for line in full_scan[1:]]
    # target = get_target(full_report)
    # if target:
    #     target = target if target[-1] != "/" else target[:-1]
    # else:
    #     target = 

    # if not target:
    #     return
    
    # host_name = target.split("://")[1]
    # web_protocol = target.split(':')[0]
    # host_type = "dns_name" if not re.search(ip_re, host_name) else "ip"  # if ":" not in host_name else "ipv6"
    # prepend_data = {"base_url": target, "method": method, "web_protocol": web_protocol, "host_type": host_name}

    # dir_com_dat = {
    #     "base_url": make_str(target),
    #     "web_protocol": make_str(web_protocol),
    #     # "method": make_str(method),
    # }

    parse_lines(full_report)
    
    print(output_data)


if __name__ == "__main__":
    main()
