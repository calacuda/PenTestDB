rdf_add_line = "_:<ADD_NAME> <<VAR_NAME>> <VALUE><VAR_TYPE> ."
rdf_update_line = "uid(<ADD_NAME>_id) <<VAR_NAME>> <VALUE><VAR_TYPE> ."

[rdf_types]
integer = "^^<xs:int>"
boolean = "^^<xs:boolean>"

[queries]
machine = [
    "query {",
    "    getMachine(func: type(Machine)) <MACHINE_FILTER>  <MACHINE_CASCADE> @normalize {",
    # "    {",
    "        ip: Machine.ip",
    "        ipv4: Machine.ip",
    "        ipv6: Machine.ipv6",
    "        mac_adr: Machine.mac_adr",
    "        mac: Machine.mac_adr",
    "        local_name: Machine.local_name",
    "        gateway: Machine.gateway_to",
    "        Mahcine.ports: ~Port.machine <PORT_FILTER> <PORT_CASCADE> {",
    # "        {",
    "           port: Port.port",
    "           tl_protocol: Port.tl_protocol",
    "           state: Port.state",
    "           service: Port.service",
    "           version: Port.version",
    "        }",
    "        Machine.dns_names: ~DNSName.machine <DNS_FILTER> <DNS_CASCADE> {", 
    # "        {",
    "           aname: DNSName.name",
    "           DNSName.pointed_to: ~DNSName.points_to {",
    # "           {",
    "               cname: DNSName.name",
    "           }",
    "           DNSName.web_dirs: ~WebDir.host <WEB_DIR_FILTER> <WEB_DIR_CASCADE> {",
    # "           {",
    "               web-dir: WebDir.dir",
    "               web_dir: WebDir.dir",
    "               webdir: WebDir.dir",
    "               url: WebDir.url",
    "               base_url: WebDir.base_url",
    "               base-url: WebDir.base_url",
    "               res_code: WebDir.res_code",
    "               res-code: WebDir.res_code",
    "               web_protocol: WebDir.wed_protocol",
    "               web-protocol: WebDir.wed_protocol",
    "               method: WebDir.method",
    "               n_chars: WebDir.num_chars",
    "               n-chars: WebDir.num_chars",
    "               num_chars: WebDir.num_chars",
    "               num-chars: WebDir.num_chars",
    "               redirect: WebDir.redirect_adr",
    "           }",
    "        }",
    "        Machine.web_dirs: ~WebDir.host <WEB_DIR_FILTER> <WEB_DIR_CASCADE> {",
    # "        {",
    "            web-dir: WebDir.dir",
    "            web_dir: WebDir.dir",
    "            webdir: WebDir.dir",
    "            url: WebDir.url",
    "            base_url: WebDir.base_url",
    "            base-url: WebDir.base_url",
    "            res_code: WebDir.res_code",
    "            res-code: WebDir.res_code",
    "            web_protocol: WebDir.wed_protocol",
    "            web-protocol: WebDir.wed_protocol",
    "            method: WebDir.method",
    "            n_chars: WebDir.num_chars",
    "            n-chars: WebDir.num_chars",
    "            num_chars: WebDir.num_chars",
    "            num-chars: WebDir.num_chars",
    "            redirect: WebDir.redirect_adr",
    "        }",
    "    }",
    "}",
]
# ^ this will need tweaking

[mutations.Machine]
query = """
(func: type(Machine)) 
@filter(eq(Machine.engagement, <ENGAGEMENT>) and eq(Machine.ip, <COMP_VAL>) or eq(Machine.ipv6, <COMP_VAL>) or eq(Machine.local_name, <COMP_VAL>)) 
{ 
    <ADD_NAME>_id as uid
}
"""
add_mutate = """
mutation @if(eq(len(<ADD_NAME>_id), 0)) {
    set {
        <ADD_RDF>
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0)) {
    set {
        <UPDATE_RDF>
    }
}
"""
mod_mutate = """
"""

[mutations.Port]
query = """
(func: uid(<MACHINE_NAME>_id)) @filter(eq(Machine.engagement, <ENGAGEMENT>)) {
    Machine.ports: ~Port.machine @filter(eq(Port.engagement, <ENGAGEMENT>) and eq(Port.port, <COMP_VAL>))
    {
        <ADD_NAME>_id as uid 
    }
}
"""
add_mutate = """
mutation @if(eq(len(<ADD_NAME>_id), 0)) {
    set {
        <ADD_RDF>
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0)) {
    set {
        <UPDATE_RDF>
    }
}
"""
mod_mutate = """
mutation @if(eq(len(<ADD_NAME>_id), 0) AND eq(len(<MACHINE_NAME>_id), 0)) {
    set {
        _:<ADD_NAME> <Port.machine> _:<MACHINE_NAME> . 
        _:<MACHINE_NAME> <Machine.ports> _:<ADD_NAME> . 
    }
}
mutation @if(eq(len(<ADD_NAME>_id), 0) AND gt(len(<MACHINE_NAME>_id), 0)) {
    set {
        _:<ADD_NAME> <Port.machine> uid(<MACHINE_NAME>_id) . 
        uid(<MACHINE_NAME>_id) <Machine.ports> _:<ADD_NAME> . 
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0) AND eq(len(<MACHINE_NAME>_id), 0)) {
    set {
        uid(<ADD_NAME>_id) <Port.machine> _:<MACHINE_NAME> . 
        _:<MACHINE_NAME> <Machine.ports> uid(<ADD_NAME>_id) . 
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0) AND gt(len(<MACHINE_NAME>_id), 0)) {
    set {
        uid(<ADD_NAME>_id) <Port.machine> uid(<MACHINE_NAME>_id) . 
        uid(<MACHINE_NAME>_id) <Machine.ports> uid(<ADD_NAME>_id) . 
    }
}
"""

[mutations.DNSName]
query = """
(func: eq(DNSName.name, <COMP_VAL>)) @filter(eq(DNSName.engagement, <ENGAGEMENT>)) {   
    <ADD_NAME>_id as uid
}
"""
add_mutate = """
mutation @if(eq(len(<ADD_NAME>_id), 0)) {
    set {
        <ADD_RDF>
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0)) {
    set {
        <UPDATE_RDF>
    }
}
"""
mod_mutate = """
mutation @if(eq(len(<ADD_NAME>_id), 0) AND eq(len(<MACHINE_NAME>_id), 0)) {
    set {
        _:<ADD_NAME> <DNSName.machine> _:<MACHINE_NAME> . 
        _:<MACHINE_NAME> <Machine.dns_names> _:<ADD_NAME> . 
    }
}
mutation @if(eq(len(<ADD_NAME>_id), 0) AND gt(len(<MACHINE_NAME>_id), 0)) {
    set {
        _:<ADD_NAME> <DNSName.machine> uid(<MACHINE_NAME>_id) . 
        uid(<MACHINE_NAME>_id) <Machine.dns_names> _:<ADD_NAME> . 
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0) AND eq(len(<MACHINE_NAME>_id), 0)) {
    set {
        uid(<ADD_NAME>_id) <DNSName.machine> _:<MACHINE_NAME> . 
        _:<MACHINE_NAME> <Machine.dns_names> uid(<ADD_NAME>_id) . 
    }
}
mutation @if(gt(len(<ADD_NAME>_id), 0) AND gt(len(<MACHINE_NAME>_id), 0)) {
    set {
        uid(<ADD_NAME>_id) <DNSName.machine> uid(<MACHINE_NAME>_id) . 
        uid(<MACHINE_NAME>_id) <Machine.dns_names> uid(<ADD_NAME>_id) . 
    }
}
"""