# engagement_conf = "engagement.toml"
host_id = ["ip", "ipv6", "dns_name"]  # ways to find a host in the hosts database don't mess with this.
port_id = ["port"]
active = true

# the list of targets to query from. this allows the user to get data that is 
# spread across multiple tables easily with a much shorter command. for example.
[targets]
ports = "FROM ports JOIN hosts ON hosts.id = ports.host_uid JOIN commands ON ports.command_uid = commands.id"
web_dirs = "FROM web_dirs JOIN hosts ON hosts.id = web_dirs.host_uid JOIN commands ON web_dirs.command_uid = commands.id" 
web-dirs = "FROM web_dirs JOIN hosts ON hosts.id = web_dirs.host_uid JOIN commands ON web_dirs.command_uid = commands.id" 
wd = "FROM web_dirs JOIN hosts ON hosts.id = web_dirs.host_uid JOIN commands ON web_dirs.command_uid = commands.id" 
creds = "FROM creds JOIN hosts ON hosts.id = creds.host_uid JOIN commands ON creds.command_uid = commands.id" 
credentials = "FROM creds JOIN hosts ON hosts.id = creds.host_uid JOIN commands ON creds.command_uid = commands.id"
CREDENTIALS = "FROM creds"
WEB_DIRS = "FROM web_dirs"
HOSTS = "FROM hosts"
COMMANDS = "FROM commands"
CMDS= "FROM commands"

# defines what sql columns are in what tables in the sql database. 
# difining things in this config file will make it easier to change the structure of the 
# database later on down the line.
[sql_tables]
ip = "hosts"
ipv6 = "hosts"
dns_name = "hosts"
local_name = "hosts"
gateway_to = "hosts"
gateway_from = "hosts"
port = "ports"
TL_protocol = "ports"
service = "ports"
version = "ports"
state = "ports"
web_protocol = "web_dirs"
res_code = "web_dirs"
base_url = "web_dirs"
url = "web_dirs"
method = "web_dirs"
redirect_adr = "web_dirs"
dir = "web_dirs"
num_chars = "web_dirs"
command = "commands"
hash_file = "creds"
wordlist = "creds"
username = "creds"
password = "creds"
domain = "creds"

# this defines when ptdb will revise a row in a database or make a new one.   
[overlap]
hosts = "ip OR ipv6 OR dns_name OR local_name"
ports = "host_uid AND port AND TL_protocol"
web_dirs = "url OR dir AND host_uid AND base_url" # rows are same if (url match OR dir match AND host_uid match AND base_url matches)
creds = "host_uid AND username AND password AND domain"

# configuration for connecting to the sql database.
[sql]
# host should be a file path if connecitng via a UNIX socket or an ip adress/url ir connecting to a remote session.
host = "/run/postgresql/"  
user = "postgres"
# passwd = "super_secret_password" # only needed if you dont have passwordless auth on the database.
port = "5432"
# ssl_cert = "/path/to/ca_cert_file.cert"  # if you're running postgres locally this is unnessesary. comment this out if you wish to not use ssl. 
null_val = "''"
template_db = "ptdb-template"

# config file for all PenTestDB commands
[server]
socket = "/tmp/ptdb/server"

[[parsers.feroxbuster]]
parser = "feroxbuster.py"

[[parsers.rustscan]]
parser = "rustscan.py"

[[parsers.gobuster]]
parser = "gobuster.py"
args = [["dir"]]

# [[parsers.gobuster]]
# parser = "null-parser.py"
# args = [["-h"],["--help"]]

# [[parsers.searchsploit]]
# parser = "searchsploit.py"

[[parsers.john]]
parser = "john.py"

[[parsers.john]]
parser = "john_show.py"
args = [['--show']]

# [[parsers.hydra]]
# parser = "save_output.py"

[[parsers.nmap]]
parser = "base_nmap.py"

[[parsers.hydra]]
parser = "hydra.py"

[[parsers.cat]]
parser = "hydra.py"

[[parsers.fping]]
parser = "fping.py"

[[parsers.dig]]
parser = "dig.py"

[[parsers.nmap]]
# each sub-array in args is one set of arguments, ALL of which must be present,
# OR ALL of any other sub-list muct be present, for this parser to be used to.
# so this parser will be used, ONLY if the user call nmap, AND either `--script=vuln`
# is on of the args to Nmap, or if both `--script` and `vuln` are both present
# in the args list.
#
# to put it in quazi-math syntaxt:
# args[0][0] AND ... AND args[0][n] OR ... OR args[k][0] AND ... AND args[k][n]
args = [['--script=vuln'],
        ['--script', 'vuln']]
parser = "nmap/nmap-vuln.parser"
