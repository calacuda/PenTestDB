#!/usr/bin/bash

echo "*** adding machines ***"

# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# mutation {
#   addMachine(input: [
#     # { 
# 	# 	ip: "192.168.1.not_real",
# 	# },
#     { 
# 		ip: "192.168.1.42",
#         engagement: {
#             name: "foobar"
#         },
# 	},
#     { 
# 		ip: "192.168.1.69",
#         engagement: {
#             name: "foobar"
#         },
# 	},
#     # { 
#     #     ip: "192.168.1.1",
#     # }
# 	]) {
#     machine {
#         ip
#     }
#   }
# }
# ' | python -m json.tool

# echo -e "\n*** adding command ***"

# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# mutation {
#   addCommand(input: [
#     {
#         command: "nmap 192.168.1.1",
#         local_time: "2022-10-31T22:05:52"
#     },
#     {
#         command: "nmap 192.168.1.69",
#         local_time: "2022-10-31T22:06:00"
#     }
#   ]) {
#     command {
#         command
#         local_time
#     }
#   }
# }
# ' | python -m json.tool

# echo -e "\n*** adding ports ***"

# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# mutation {
#   addPort(input: [
#     {
#         port: 80,
#         service: "http",
#         tl_protocol: "tcp",
#         state: "open",
#         machine: {ip: "192.168.1.1"},
#         command: {command: "nmap 192.168.1.1"}
#     },
#     {
#         port: 443,
#         service: "https",
#         tl_protocol: "tcp",
#         state: "open",
#         machine: {ip: "192.168.1.1"},
#         command: {command: "nmap 192.168.1.1"}
#     },
#     {
#         port: 80,
#         service: "http",
#         tl_protocol: "tcp",
#         state: "open",
#         machine: {ip: "192.168.1.69"},
#         command: {command: "nmap 192.168.1.69"}
#     }
#   ]) {
#     port {
#         port
#         service
#         tl_protocol
#         state
#     }
#   }
# }
# ' | python -m json.tool

# echo -e "\n*** adding dns_names ***"

# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# mutation {
#     addDNSName(input: [
#     # ,
#     {
#         name: "unicornscripts.com",
#         is_cname: true,
#         points_to: {
#             name: "router.home",
#             is_cname: false,
#             machine: {ip: "192.168.1.1"},
#             # command: {command: "nmap 192.168.1.1"}
#         },
#         # command: {command: "nmap 192.168.1.1"}
#     }
#   ]) {
#     dNSName {
#         name
#     }
#   }
# }
# ' | python -m json.tool

echo -e "\n*** MUTATION COMPLETE ***"

echo -e "\n*** graphql ***"
# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# query {
#     queryMachine(filter: {
#         ip: {regexp: "/^192.168.1.[0-9]/"}
#     }) {
#         # uid
#         ip
#         id
#         ports {
#             port
#             state
#             service
#             tl_protocol
#             command {
#                 command
#             }
#         }
#     }
#     queryCommand {
#         # uid
#         id
#         command
#     }
#     queryDNSName {
#         name
#     }
# }
# ' | python -m json.tool

# curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# query {
#     queryMachine {
#         ip
#         ports {
#             port
#             state
#             tl_protocol
#             service
#             command {
#                 command
#             }
#         }
#         dns_names {
#             name
#             pointed_to {
#                 name
#             }
#         }
#     }
# }
# ' | python -m json.tool

echo -e "\n*** DQL ***"
# curl -H "Content-Type: application/dql" -X POST  'database.home:8080/query' -d $'
# {
#     getMachine(func: type(Machine)) {
#         uid
#         id
#         Machine.ip
#         Machine.dns_names: ~DNSName.machine {
#             DNSName.name
#         }
#         Mahcine.ports: ~Port.machine {
#             uid
#             Port.port
#             Port.command {
#                 Command.command
#             }
#         }
#     }
#     getPort(func: type(Port)) {
#         uid
#         Port.port
#         Port.machine {
#             uid
#             Machine.ip
#         }
#         Port.command {
#             Command.command
#         }
#     }
#     # getDNSName(func: type(DNSName)) {
#     #     uid
#     # }
# }
# ' | python -m json.tool

# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
#     query {
#         q1(func: eq(DNSName.name, "dew-drop.home")) @filter(eq(Engagement.name, "foobar")) {
#             name_id as uid
#             engagement {
#                 Engagement.name    
#             }
#         }
#         q2(func: eq(Machine.ip, "192.168.1.69")) @filter(eq(Engagement.name, "foobar")) {
#             machine_id as uid
#             engagement {
#                 Engagement.name    
#             }  
#         }
#         q3(func: eq(Engagement.name, "foobar")) {
#             engagement_id as uid
#         }
#     }
#     mutation @if(gt(len(machine_id), 0) AND eq(len(name_id), 0)) {
#         set {
#             _:name_id <dgraph.type> "DNSName" .
#             _:name_id <DNSName.machine> uid(machine_id) .
#             _:name_id <DNSName.name> "dew-drop.home" .
#             _:name_id <DNSName.is_cname> "false"^^<xs:boolean> .
#             _:name_id <DNSName.engagement> uid(engagement_id) .
#             uid(machine_id) <Machine.dns_names> _:name_id . 
#         }
#     }
# }
# ' | python -m json.tool

# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
#     query {
#         q1(func: eq(DNSName.name, "blade.home")) @filter(eq(Engagement.name, "foobar")) {
#             name_id as uid
#             engagement {
#                 Engagement.name    
#             }  
#         }
#         q2(func: eq(Machine.ip, "192.168.1.42")) @filter(eq(Engagement.name, "foobar")) {
#             machine_id as uid
#             engagement {
#                 Engagement.name    
#             } 
#         }
#         q3(func: eq(Engagement.name, "foobar")) {
#             engagement_id as uid
#         }
#     }
#     mutation @if(gt(len(machine_id), 0) AND eq(len(name_id), 0)) {
#         set {
#             _:name_id <dgraph.type> "DNSName" .
#             _:name_id <DNSName.machine> uid(machine_id) .
#             _:name_id <DNSName.name> "blade.home" .
#             _:name_id <DNSName.is_cname> "false"^^<xs:boolean> .
#             _:name_id <DNSName.engagement> uid(engagement_id) .
#             uid(machine_id) <Machine.dns_names> _:name_id . 
#         }
#     }
# }
# ' | python -m json.tool