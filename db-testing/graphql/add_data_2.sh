#!/usr/bin/bash

echo "*** adding DATA ***"

echo "ADDING 192.168.1.69"
# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
#     query {
#         q1(func: eq(DNSName.name, "dew-drop.home")) {
#             name_id as uid    
#         }
#         q2(func: eq(Machine.ip, "192.168.1.69")) {
#             machine_id as uid    
#         }
#         q3(func: eq(Port.port, 80)) @cascade {
#             port_a_id as uid
#             Port.machine: ~Machine.ports @filter(eq(Machine.ip, "192.168.1.69")) {
#                 uid
#             }
#         }
#         q4(func: eq(Port.port, 443)) @cascade {
#             port_b_id as uid
#             Port.machine: ~Machine.ports @filter(eq(Machine.ip, "192.168.1.69")) {
#                 uid
#             }
#         }
#         q5(func: eq(DNSName.name, "unicornscripts.com")) {
#             cname_id as uid
#         }
#     }
#     mutation @if(eq(len(machine_id), 0) AND eq(len(name_id), 0) AND eq(len(port_a_id), 0) AND eq(len(port_b_id), 0) AND eq(len(cname_id), 0)) {
#         set {
#             _:name <dgraph.type> "DNSName" .
#             _:name <DNSName.name> "dew-drop.home" .
#             _:name <DNSName.is_cname> "false"^^<xs:boolean> .
#             _:machine <dgraph.type> "Machine" .
#             _:machine <Machine.ip> "192.168.1.69" .
#             _:port_a <dgraph.type> "Port" .
#             _:port_a <Port.port> "80"^^<xs:int> .
#             _:port_a <Port.state> "open" .
#             _:port_a <Port.tl_protocol> "tcp" .
#             _:port_a <Port.service> "http" .
#             _:port_b <dgraph.type> "Port" .
#             _:port_b <Port.port> "443"^^<xs:int> .
#             _:port_b <Port.state> "open" .
#             _:port_b <Port.tl_protocol> "tcp" .
#             _:port_b <Port.service> "https" .
#             _:cname_id <dgraph.type> "DNSName" .
#             _:cname_id <DNSName.name> "unicornscripts.com" .
#             _:cname_id <DNSName.is_cname> "true"^^<xs:boolean> .

#             _:cname_id <DNSName.points_to> _:name .
#             _:name <DNSName.pointed_to> _:cname_id .
#             _:port_a <Port.machine> _:machine .            
#             _:port_b <Port.machine> _:machine .            
#             _:machine <Machine.dns_name> _:name .
#             _:machine <Machine.ports> _:port_a .
#             _:machine <Machine.ports> _:port_b .
#             _:name <DNSName.machine> _:machine .
#         }
#     }
# }
# ' | python -m json.tool

# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
#     query {
#         q1(func: eq(DNSName.name, "dew-drop.home")) {
#             name_id as uid    
#         }
#         q2(func: eq(Machine.ip, "192.168.1.69")) {
#             machine_id as uid    
#         }
#         q3(func: uid(machine_id)) @cascade {
#             Machine.ports: ~Port.machine @filter(eq(Port.port, 80)) {
#                 port_a_id as uid
#             }
#         }
#         q4(func: uid(machine_id)) @cascade {
#             Machine.ports: ~Port.machine @filter(eq(Port.port, 443)) {
#                 port_b_id as uid
#             }
#         }
#         q5(func: eq(DNSName.name, "unicornscripts.com")) @cascade {
#             cname_id as uid
#         }
#     }
#     mutation @if(eq(len(name_id), 0)) {
#         set {
#             _:name <dgraph.type> "DNSName" .
#             _:name <DNSName.name> "dew-drop.home" .
#             _:name <DNSName.is_cname> "false"^^<xs:boolean> .
#             _:name <DNSName.machine> _:machine .
#         }
#     }
#      mutation @if(eq(len(name_id), 0) AND eq(len(machine_id), 0)) {
#         set {
#             _:name <Port.machine> _:machine . 
#             _:machine <Machine.ports> _:name . 
#         }
#     }
#     mutation @if(eq(len(name_id), 0) AND gt(len(machine_id), 0)) {
#         set {
#             _:name <Port.machine> uid(machine_id) . 
#             uid(machine_id) <Machine.ports> _:name . 
#         }
#     }
#     mutation @if(eq(len(machine_id), 0)) {
#         set {
#             _:machine <dgraph.type> "Machine" .
#             _:machine <Machine.ip> "192.168.1.69" .
#             _:machine <Machine.dns_name> _:name .
#             _:machine <Machine.ports> _:port_a .
#             _:machine <Machine.ports> _:port_b .
#         }
#     }
#     mutation @if(eq(len(port_a_id), 0)) {
#         set {
#             _:port_a <Port.port> "80"^^<xs:int> .
#             _:port_a <Port.state> "open" .
#             _:port_a <Port.tl_protocol> "tcp" .
#             _:port_a <Port.service> "http" .
#             _:port_a <dgraph.type> "Port" .
#         }
#     }
#     mutation @if(eq(len(port_a_id), 0) AND eq(len(machine_id), 0)) {
#         set {
#             _:port_a <Port.machine> _:machine . 
#             _:machine <Machine.ports> _:port_a . 
#         }
#     }
#     mutation @if(eq(len(port_a_id), 0) AND gt(len(machine_id), 0)) {
#         set {
#             _:port_a <Port.machine> uid(machine_id) . 
#             uid(machine_id) <Machine.ports> _:port_a . 
#         }
#     }
#     mutation @if(eq(len(port_b_id), 0)) {
#         set {
#             _:port_b <Port.port> "443"^^<xs:int> .
#             _:port_b <Port.state> "open" .
#             _:port_b <Port.tl_protocol> "tcp" .
#             _:port_b <Port.service> "https" .
#             _:port_b <dgraph.type> "Port" .
#         }
#     }
#     mutation @if(eq(len(port_b_id), 0) AND eq(len(machine_id), 0)) {
#         set {
#             _:port_b <Port.machine> _:machine . 
#             _:machine <Machine.ports> _:port_b . 
#         }
#     }
#     mutation @if(eq(len(port_b_id), 0) AND gt(len(machine_id), 0)) {
#         set {
#             _:port_b <Port.machine> uid(machine_id) . 
#             uid(machine_id) <Machine.ports> _:port_b . 
#         }
#     }
#     mutation @if(eq(len(cname_id), 0)) {
#         set {
#             _:cname_id <dgraph.type> "DNSName" .
#             _:cname_id <DNSName.name> "unicornscripts.com" .
#             _:cname_id <DNSName.is_cname> "true"^^<xs:boolean> .
#         }
#     }
#     mutation @if(eq(len(cname_id), 0) AND eq(len(name_id), 0)) {
#         set {
#             _:cname_id <DNSName.points_to> _:name .
#             _:name <DNSName.pointed_to> _:cname_id .
#         }
#     }
#     mutation @if(eq(len(cname_id), 0) AND gt(len(name_id), 0)) {
#         set {
#             _:cname_id <DNSName.points_to> uid(name_id) .
#             uid(name_id) <DNSName.pointed_to> _:cname_id .
#         }
#     }
# }
# ' | python -m json.tool

echo "ADDING 192.168.1.42"
curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
upsert {
    query {
        q1(func: eq(DNSName.name, "blade.home"))  
        @cascade(DNSName.engagement)
        {
            name_id as uid
            DNSName.engagement @filter(eq(Engagement.name, "foobar")) {
                
            } 
        }
        q2(func: type(Machine)) 
        @filter(eq(Machine.ip, "192.168.1.42") or eq(Machine.ipv6, "192.168.1.42") or eq(Machine.local_name, "192.168.1.42")) 
        @cascade(Machine.engagement)
        {
            machine_id as uid
            Machine.engagement @filter(eq(Engagement.name, "foobar")) {

            }
        }
        q3(func: uid(machine_id)) @cascade(Machine.engagement, Port.port) {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 80)) {
                port_a_id as uid
            }
            Machine.engagement @filter(eq(Engagement.name, "foobar")) {
                
            }
        }
        q4(func: uid(machine_id)) @cascade(Machine.engagement, Machine.ports) {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 443)) {
                port_b_id as uid
            }
            Machine.engagement @filter(eq(Engagement.name, "foobar")) {
                
            }
        }
        q5(func: type(Engagement)) @filter(eq(Engagement.name, "foobar")) {
            engagement_id as uid
        }
    }
    mutation @if(eq(len(engagement_id), 0)) {
        set {
            _:engagement <dgraph.type> "Engagement" .
            _:engagement <Engagement.name> "foobar" .
            _:engagement <Engagement.complete> "false"^^<xs:boolean> .
        }
    }

    mutation @if(eq(len(name_id), 0)) {
        set {
            _:name <dgraph.type> "DNSName" .
            _:name <DNSName.name> "blade.home" .
            _:name <DNSName.is_cname> "false"^^<xs:boolean> .
            _:name <DNSName.machine> _:machine .
        }
    }
    mutation @if(eq(len(name_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:name <DNSName.machine> _:machine . 
            _:machine <Machine.dns_name> _:name . 
        }
    }
    mutation @if(eq(len(name_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:name <DNSName.machine> uid(machine_id) . 
            uid(machine_id) <Machine.DNSName> _:name . 
        }
    }
    mutation @if(eq(len(name_id), 0) AND eq(len(engagement_id), 0)) {
        set {
            _:name <DNSName.engagement> _:engagement . 
        }
    }
    mutation @if(eq(len(name_id), 0) AND gt(len(engagement_id), 0)) {
        set {
            _:name <DNSName.engagement> uid(engagement_id) . 
        }
    }

    mutation @if(eq(len(machine_id), 0)) {
        set {
            _:machine <dgraph.type> "Machine" .
            _:machine <Machine.ip> "192.168.1.42" .
            _:machine <Machine.dns_name> _:name .
            _:machine <Machine.ports> _:port_a .
            _:machine <Machine.ports> _:port_b .
        }
    }
    mutation @if(eq(len(machine_id), 0) AND eq(len(engagement_id), 0)) {
        set {
            _:machine <Machine.engagement> _:engagement . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND gt(len(engagement_id), 0)) {
        set {
            _:machine <Machine.engagement> uid(engagement_id) . 
        }
    }

    mutation @if(eq(len(port_a_id), 0)) {
        set {
            _:port_a <dgraph.type> "Port" .
            _:port_a <Port.port> "80"^^<xs:int> .
            _:port_a <Port.state> "open" .
            _:port_a <Port.tl_protocol> "tcp" .
            _:port_a <Port.service> "http" .
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND eq(len(engagement_id), 0)) {
        set {
            _:port_a <Port.engagement> _:engagement . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND gt(len(engagement_id), 0)) {
        set {
            _:port_a <Port.engagement> uid(engagement_id) . 
        }
    }

    mutation @if(eq(len(port_b_id), 0)) {
        set {
            _:port_b <dgraph.type> "Port" .
            _:port_b <Port.port> "443"^^<xs:int> .
            _:port_b <Port.state> "open" .
            _:port_b <Port.tl_protocol> "tcp" .
            _:port_b <Port.service> "https" .
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_b . 
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_b . 
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND eq(len(engagement_id), 0)) {
        set {
            _:port_b <DNSName.engagement> _:engagement . 
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND gt(len(engagement_id), 0)) {
        set {
            _:port_b <DNSName.engagement> uid(engagement_id) . 
        }
    }
}
' | python -m json.tool

# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
# query {
# q0(func: eq(DNSName.name, scanme.nmap.org)) @cascade {
#             dns_name_0_id as uid
#         }
# q1(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 22)) {
#         port_0_id as uid
#     }
# }

# q2(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 139)) {
#         port_3_id as uid
#     }
# }

# q3(func: type(Machine)) @filter(eq(Machine.ip, 45.33.32.156) or eq(Machine.ipv6, 45.33.32.156) or eq(Machine.local_name, 45.33.32.156)) {
#     machine_0_id as uid
# }

# q4(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 445)) {
#         port_4_id as uid
#     }
# }

# q5(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 31337)) {
#         port_7_id as uid
#     }
# }

# q6(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 80)) {
#         port_1_id as uid
#     }
# }

# q7(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 9929)) {
#         port_6_id as uid
#     }
# }

# q8(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 135)) {
#         port_2_id as uid
#     }
# }

# q9(func: uid(machine_0_id)) @cascade {
#     Machine.ports: ~Port.machine @filter(eq(Port.port, 593)) {
#         port_5_id as uid
#     }
# }
# }
# mutation {
#         set {
#             _:command_0 <Command.command> "nmap scanme.nmap.org" .
#             _:command_0 <Command.local_time> "2022-11-05T02:49:18.524954597-04:00" .
#             _:command_0 <dgraph.type> "Command" .
#         }
#     }
# mutation @if(eq(len(dns_name_0_id), 0)) {
#     set {

# 	_:dns_name_0 <DNSName.name> "scanme.nmap.org" .
# 	_:dns_name_0 <DNSName.uid> _:dns_name_0 .
# 	_:dns_name_0 <dgraph.type> "DNSName" .
# 	_:dns_name_0 <DNSName.machine> _:machine_0 .
# 	_:dns_name_0 <DNSName.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(dns_name_0_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:dns_name_0 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:dns_name_0 .
#     }
# }
# mutation @if(eq(len(dns_name_0_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:dns_name_0 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:dns_name_0 .
#     }
# }

# mutation @if(eq(len(port_0_id), 0)) {
#     set {

# 	_:port_0 <Port.port> "22" .
# 	_:port_0 <Port.TL_protocol> "tcp" .
# 	_:port_0 <Port.state> "open" .
# 	_:port_0 <Port.service> "ssh" .
# 	_:port_0 <Port.version> "OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)" .
# 	_:port_0 <Port.uid> _:port_0 .
# 	_:port_0 <dgraph.type> "Port" .
# 	_:port_0 <Port.machine> _:machine_0 .
# 	_:port_0 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_0_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_0 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_0 .
#     }
# }
# mutation @if(eq(len(port_0_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_0 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_0 .
#     }
# }

# mutation @if(eq(len(port_3_id), 0)) {
#     set {

# 	_:port_3 <Port.port> "139" .
# 	_:port_3 <Port.TL_protocol> "tcp" .
# 	_:port_3 <Port.state> "filtered" .
# 	_:port_3 <Port.service> "netbios-ssn" .
# 	_:port_3 <Port.uid> _:port_3 .
# 	_:port_3 <dgraph.type> "Port" .
# 	_:port_3 <Port.machine> _:machine_0 .
# 	_:port_3 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_3_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_3 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_3 .
#     }
# }
# mutation @if(eq(len(port_3_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_3 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_3 .
#     }
# }

# mutation @if(eq(len(machine_0_id), 0)) {
#         set {

# 	_:machine_0 <Machine.ip> "45.33.32.156" .
# 	_:machine_0 <Machine.uid> _:machine_0 .
# 	_:machine_0 <dgraph.type> "Machine" .
# 	_:machine_0 <Machine.ports> _:port_0 .
# 	_:machine_0 <Machine.ports> _:port_1 .
# 	_:machine_0 <Machine.ports> _:port_2 .
# 	_:machine_0 <Machine.ports> _:port_3 .
# 	_:machine_0 <Machine.ports> _:port_4 .
# 	_:machine_0 <Machine.ports> _:port_5 .
# 	_:machine_0 <Machine.ports> _:port_6 .
# 	_:machine_0 <Machine.ports> _:port_7 .
# 	_:machine_0 <Machine.dns_name> _:dns_name_0 .
# 	_:machine_0 <Machine.command> _:command_0 .
#         }
#     }


# mutation @if(eq(len(port_4_id), 0)) {
#     set {

# 	_:port_4 <Port.port> "445" .
# 	_:port_4 <Port.TL_protocol> "tcp" .
# 	_:port_4 <Port.state> "filtered" .
# 	_:port_4 <Port.service> "microsoft-ds" .
# 	_:port_4 <Port.uid> _:port_4 .
# 	_:port_4 <dgraph.type> "Port" .
# 	_:port_4 <Port.machine> _:machine_0 .
# 	_:port_4 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_4_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_4 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_4 .
#     }
# }
# mutation @if(eq(len(port_4_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_4 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_4 .
#     }
# }

# mutation @if(eq(len(port_7_id), 0)) {
#     set {

# 	_:port_7 <Port.port> "31337" .
# 	_:port_7 <Port.TL_protocol> "tcp" .
# 	_:port_7 <Port.state> "open" .
# 	_:port_7 <Port.service> "tcpwrapped" .
# 	_:port_7 <Port.uid> _:port_7 .
# 	_:port_7 <dgraph.type> "Port" .
# 	_:port_7 <Port.machine> _:machine_0 .
# 	_:port_7 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_7_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_7 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_7 .
#     }
# }
# mutation @if(eq(len(port_7_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_7 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_7 .
#     }
# }

# mutation @if(eq(len(port_1_id), 0)) {
#     set {

# 	_:port_1 <Port.port> "80" .
# 	_:port_1 <Port.TL_protocol> "tcp" .
# 	_:port_1 <Port.state> "open" .
# 	_:port_1 <Port.service> "http" .
# 	_:port_1 <Port.version> "Apache httpd 2.4.7 ((Ubuntu))" .
# 	_:port_1 <Port.uid> _:port_1 .
# 	_:port_1 <dgraph.type> "Port" .
# 	_:port_1 <Port.machine> _:machine_0 .
# 	_:port_1 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_1_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_1 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_1 .
#     }
# }
# mutation @if(eq(len(port_1_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_1 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_1 .
#     }
# }

# mutation @if(eq(len(port_6_id), 0)) {
#     set {

# 	_:port_6 <Port.port> "9929" .
# 	_:port_6 <Port.TL_protocol> "tcp" .
# 	_:port_6 <Port.state> "open" .
# 	_:port_6 <Port.service> "nping-echo" .
# 	_:port_6 <Port.version> "Nping echo" .
# 	_:port_6 <Port.uid> _:port_6 .
# 	_:port_6 <dgraph.type> "Port" .
# 	_:port_6 <Port.machine> _:machine_0 .
# 	_:port_6 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_6_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_6 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_6 .
#     }
# }
# mutation @if(eq(len(port_6_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_6 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_6 .
#     }
# }

# mutation @if(eq(len(port_2_id), 0)) {
#     set {

# 	_:port_2 <Port.port> "135" .
# 	_:port_2 <Port.TL_protocol> "tcp" .
# 	_:port_2 <Port.state> "filtered" .
# 	_:port_2 <Port.service> "msrpc" .
# 	_:port_2 <Port.uid> _:port_2 .
# 	_:port_2 <dgraph.type> "Port" .
# 	_:port_2 <Port.machine> _:machine_0 .
# 	_:port_2 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_2_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_2 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_2 .
#     }
# }
# mutation @if(eq(len(port_2_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_2 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_2 .
#     }
# }

# mutation @if(eq(len(port_5_id), 0)) {
#     set {

# 	_:port_5 <Port.port> "593" .
# 	_:port_5 <Port.TL_protocol> "tcp" .
# 	_:port_5 <Port.state> "filtered" .
# 	_:port_5 <Port.service> "http-rpc-epmap" .
# 	_:port_5 <Port.uid> _:port_5 .
# 	_:port_5 <dgraph.type> "Port" .
# 	_:port_5 <Port.machine> _:machine_0 .
# 	_:port_5 <Port.command> _:command_0 .
#     }
# }

# mutation @if(eq(len(port_5_id), 0) AND eq(len(machine_0_id), 0)) {
#     set {
#         _:port_5 <Port.machine> _:machine_0 .
#         _:machine_0 <Machine.ports> _:port_5 .
#     }
# }
# mutation @if(eq(len(port_5_id), 0) AND gt(len(machine_0_id), 0)) {
#     set {
#         _:port_5 <Port.machine> uid(machine_0_id) .
#         uid(machine_0_id) <Machine.ports> _:port_5 .
#     }
# }
# }
# ' | python -m json.tool