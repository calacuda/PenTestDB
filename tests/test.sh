#!/usr/bin/bash
rm -f target/debug/ptdb  # just to be safe
rm -f ~/.config/ptdb/engagement.toml  # just to be safe
ln -s ~/.config/ptdb/engagements/SAMPLE-ENGAGEMENT.toml ~/.config/ptdb/engagement.toml

PASSED="true"
FAILED_TESTS=()
RESULTS=()

function print_header {
    echo "==================================="
    echo " |  database => $DB_IP"
    echo " |  target   => $TARGET_IP"
    echo " |  wordlist => $WORDLIST"
    echo "==================================="
}

function cargo_exit {
    echo "ptdb failed to build!"
    exit 1
}

function cargo-build {
    cargo +nightly update
    echo "cargo is compiling the binary (this may take a while)"
    cargo +nightly build 2> /dev/null || cargo_exit
    echo "binary compiled"
}

# make the docker database config file.
function prepare-db-conf {
    echo "host = \"$DB_IP\"" > ~/.config/ptdb/db-servers/docker.toml
    echo "user = \"postgres\"" >> ~/.config/ptdb/db-servers/docker.toml
    echo "passwd = \"postgres\"" >> ~/.config/ptdb/db-servers/docker.toml
    echo "require_ssl = false" >> ~/.config/ptdb/db-servers/docker.toml
    echo "db_type = \"SQL\"" >> ~/.config/ptdb/db-servers/docker.toml
}

function prepare-engagement {
    PGPASSWORD=$psql_pass psql -U $psql_user -h $DB_IP -c "DROP DATABASE IF EXISTS $DB_NAME"';'
    target/debug/ptdb engagement -a -n $DB_NAME -s docker.toml
}

function setup {
    cargo-build
    print_header
    echo ""
    prepare-db-conf
    prepare-engagement
}

setup

# takes FOR EVER to complete!
# echo "==================================="
# echo "[LOG] testing fping parser"
# echo "==================================="
# source tests/test-scripts/fping.sh
# fping_data
# RESULTS+=( "$( fping_test )" )
# if [[ $? != 0 ]]; then
#     FAILED_TESTS+=("fping")
# fi 
# echo ""

echo "==================================="
echo "[LOG] testing dig parser"
echo "==================================="
source tests/test-scripts/dig.sh
dig_data
RESULTS+=( "$( dig_test )" )
if [[ $? != 0 ]]; then
    FAILED_TESTS+=("dig")
fi 
echo ""

echo "==================================="
echo "[LOG] testing base_nmap parser"
echo "==================================="
source tests/test-scripts/base_nmap.sh
base_nmap_data
RESULTS+=( "$( base_nmap_test )" )
if [[ $? != 0 ]]; then
    FAILED_TESTS+=("base_nmap")
fi 
echo ""

echo "==================================="
echo "[LOG] testing gobuster parser"
echo "==================================="
source tests/test-scripts/gobuster_dir.sh
gobuster_dir_data
RESULTS+=( "$( gobuster_dir_test )" )
if [[ $? != 0 ]]; then
    FAILED_TESTS+=("gobuster_dir")
fi 
echo ""

echo "==================================="
echo "[LOG] testing feroxbuster parser"
echo "==================================="
source tests/test-scripts/feroxbuster.sh
feroxbuster_data
RESULTS+=( "$( feroxbuster_test )" )
if [[ $? != 0 ]]; then
    FAILED_TESTS+=("feroxbuster")
fi 
echo ""

echo "==================================="
echo "[LOG] testing rustscan parser"
echo "==================================="
source tests/test-scripts/rustscan.sh
rustscan_data
RESULTS+=( "$( rustscan_test )" )
if [[ $? != 0 ]]; then
    FAILED_TESTS+=("rustscan")
fi 
echo ""

echo ""

echo "==================================="
echo "[LOG] results of integrity check"
echo "==================================="
for result in "${RESULTS[@]}"; do
    echo "    $result"
done
echo "==================================="
echo "[LOG] test results"
echo "==================================="

echo "    [LOG] tests failed {"
for test in "${FAILED_TESTS[@]}"; do
    echo "          $test"
    PASSED="false"
done
echo "    }"

# target/debug/ptdb query -q "SELECT * FROM machines;"
# target/debug/ptdb query -q "SELECT * FROM dns_names;"
# dig $TARGET_IP $DB_IP | /etc/ptdb/parsers/dig.py
# cmd_uid
# target/debug/ptdb query -q "SELECT dns_name, record_type, ip, ipv6, mac_adr, local_name FROM machines JOIN commands ON commands.id = machines.command_uid JOIN dns_names ON dns_names.machine_uid = machines.id WHERE commands.id = $cmd_uid ORDER BY ip ASC;"
# echo
# dig $TARGET_IP

if [[ $PASSED != "false" ]]; then
    echo "    [LOG] RESULT: PASSED"
    exit 0
else
    echo "    [LOG] RESULT: FAILED"
    exit 1
fi
