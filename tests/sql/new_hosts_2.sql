-- drop tables
DROP TABLE dns_records;
DROP TABLE cnames;
DROP TABLE ports;
DROP TABLE machines;
DROP TABLE dns_names;

-- tables
CREATE TABLE dns_names (
    id serial PRIMARY KEY NOT NULL,
    dns_name varchar(255) DEFAULT '',
    UNIQUE (dns_name)
);

CREATE TABLE machines (
    id serial PRIMARY KEY NOT NULL,
    ip varchar(255) DEFAULT '',
    ipv6 varchar(255) DEFAULT '',
    mac_adr varchar(255) DEFAULT '',
    -- cname varchar(255) DEFAULT '',
    local_name varchar(255) DEFAULT '',
    gateway_to varchar(255) DEFAULT '', -- gateway to this box form the outside world  (useful for machines that require pivoting to get to.)
    constraint chk_null check (ip != '' or ipv6 != '' or mac_adr != '' or local_name != ''),
    UNIQUE (ip, ipv6, mac_adr)
    -- UNIQUE (ipv6),
    -- UNIQUE (ip)
    -- UNIQUE()
);

CREATE TABLE cnames (
    id serial PRIMARY KEY NOT NULL,
    cname varchar(255) DEFAULT '',
    points_to int references dns_names(id),
    UNIQUE (cname)
);

CREATE TABLE dns_records (
    id serial PRIMARY KEY NOT NULL,
    dns_name_uid int references dns_names(id),
    machine_uid int references machines(id),
    UNIQUE (dns_name_uid, machine_uid)
);

CREATE TABLE hosts (
    id serial PRIMARY KEY NOT NULL,
    machine_uid int references machines(id) DEFAULT NULL,
    dns_name_uid int references dns_names(id) DEFAULT NULL,
    cname_uid int references cnames(id) DEFAULT NULL,
    constraint chk_only_one check ((dns_name_uid IS NOT NULL)::INTEGER + 
                                   (cname_uid IS NOT NULL)::INTEGER + 
                                   (machine_uid IS NOT NULL)::INTEGER = 1),
    UNIQUE (dns_name_uid, cname_uid, machine_uid)
);

CREATE TABLE ports (
    id serial PRIMARY KEY NOT NULL,
    host_uid int references hosts(id), -- INTEGER NOT NULL,
    -- host_uid INTEGER NOT NULL,
    port varchar(255) NOT NULL,
    state varchar(255) DEFAULT '',
    TL_protocol varchar(255) DEFAULT '', -- transport layer protocol tcp or udp
    service varchar(255) DEFAULT '',
    version varchar(255) DEFAULT '',
    command_uid INTEGER NOT NULL, -- NOT null
    UNIQUE (port, machine_uid, state, service, TL_protocol, version)
    -- FOREIGN KEY (machine_uid) REFERENCES machines(id)
    UNIQUE (port, host_uid)
);


CREATE TABLE creds (
    id serial PRIMARY KEY NOT NULL,
    host_uid int references hosts(id), -- INTEGER NOT NULL,
    -- host_uid INTEGER DEFAULT 0,
    username varchar(255) DEFAULT '',
    password varchar(255) DEFAULT '',
    wordlist varchar(255) DEFAULT '',
    hash_file varchar(255) DEFAULT '',
    domain varchar(255) DEFAULT '', -- where this username and password can be used. (local, ssh, ftp, web, etc), if multiple domains, there will be multiple rows.
    command_uid INTEGER NOT NULL, -- pointer to id of 'commands' table
    port_uid INTEGER DEFAULT 0, -- pointer to the id of the 'ports' table
    -- CONSTRAINT order_unique UNIQUE (id),
    UNIQUE (username, password, host_uid, hash_file) -- don't add wordlist (see, REASON #1 bellow) -- maybe add host?
    -- REASON #1: passwd-username combo will be added again for each passwd cracking atempt with
    --            different wordlists
    -- UNIQUE ()
);

CREATE TABLE web_dirs (
    id serial PRIMARY KEY NOT NULL,
    host_uid int references hosts(id), -- INTEGER NOT NULL,\
    --   host varchar(255) NOT NULL, -- some way of identifying a host, a name, cname, or ip
    -- host_uid INTEGER NOT NULL,
    dir varchar(255) DEFAULT '',
    url varchar(255) DEFAULT '',
    base_url varchar(255) NOT NULL,
    res_code varchar(255) NOT NULL,
    web_protocol varchar(255) NOT NULL,
    method varchar(255) NOT NULL,
    num_chars varchar(255) DEFAULT '',
    redirect_adr varchar(255) DEFAULT '',
    -- wordlist varchar(255),
    command_uid INTEGER NOT NULL, -- pointer to id of 'commands' table
    constraint chk_null check (NOT dir = '' OR NOT url = ''),
    UNIQUE (host_uid, base_url, dir, url, res_code, web_protocol, num_chars, method)
);

CREATE TABLE commands (
  id serial PRIMARY KEY NOT NULL,
  command varchar NOT NULL,
  local_time varchar(255) NOT NULL,
  -- exit_status varchar(255) DEFAULT '',
  -- output varchar(10240),
  -- CONSTRAINT order_unique UNIQUE (id),
  -- UNIQUE (command),
  -- UNIQUE (local_time)
  UNIQUE (command, local_time)
);

-- functions



-- INSERT INTO dns_names (id, dns_name) VALUES (1, 'localhost');
-- INSERT INTO machines (id, ip, dns_name_uid) VALUES (1, '127.0.0.1', 1);
-- INSERT INTO dns_names (id, dns_name) VALUES (2, 'router.home');
-- INSERT INTO machines (id, ip, dns_name_uid) VALUES (2, '192.168.1.1', 2);
-- INSERT INTO dns_names (id, dns_name) VALUES (3, 'blade.home');
-- INSERT INTO machines (id, ip, dns_name_uid) VALUES (3, '192.168.1.42', 3);
-- -- INSERT INTO machines (id, ip, dns_name_uid, cname) VALUES (1, '127.0.0.1', 1, 'localhost');
-- -- INSERT INTO machines (id, ip, dns_name_uid, cname) VALUES (2, '0.0.0.0', 3, 'localhost');
-- -- INSERT INTO machines (id, ip, dns_name_uid, cname) VALUES (3, '192.168.1.1', 2, 'router');
-- -- INSERT INTO ports (id, port, machine_uid) VALUES (1, '80', 1);
-- -- INSERT INTO ports (id, port, machine_uid) VALUES (2, '443', 2);
-- -- INSERT INTO cnames (id, cname, points_to) VALUES (1, 3, 1);
-- -- INSERT INTO cnames (id, cname, points_to) VALUES (2, 2, 1);
-- INSERT INTO dns_names (id, dns_name) VALUES (4, 'unicornscripts.com');
-- INSERT INTO cnames (id, cname, points_to) VALUES (2, 4, 3);

-- CREATE FUNCTION

-- CREATE TRIGGER add_null_cnames AFTER INSERT 
--     ON dns_names
--     FOR EACH ROW
--     EXECUTE FUNCTION add_cname(NEW.id);