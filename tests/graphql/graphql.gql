type Command  {
	id: ID! 
	command: String! @search(by:[fulltext, term, trigram]) @id
	local_time: DateTime!
}

type Port  {
	id: ID! 
	port: Int! @search
	state: String @search(by:[fulltext, term]) 
	tl_protocol: String @search(by:[fulltext, term]) 
	service: String @search(by:[fulltext, term, trigram]) 
	version: String @search(by:[fulltext, term, trigram]) 
	machine: Machine! @hasInverse(field:ports)
	command: Command! 
}

type Machine  {
	id: ID! 
	ip: String! @search(by:[fulltext, term, trigram]) @id
	# ipv4: String @search(by:[fulltext, term, trigram])
	ipv6: String @search(by:[fulltext, term, trigram])
	mac_adr: String @search(by:[fulltext, term, trigram])
	local_name: String @search(by:[fulltext, term, trigram])  
	gateway_to: String @search(by:[fulltext, term, trigram]) 
	ports: [Port!] @hasInverse(field:machine) 
  	dns_names: [DNSName!] @hasInverse(field:machine)
	command: Command
}

type WebDir  {
	id: ID! 
	dir: String! @search(by: [fulltext, term, trigram]) @id
	url: String! @search(by: [fulltext, term, trigram]) @id
	base_url: String! @search(by: [fulltext, term, trigram])
	res_code: Int @search
	wed_protocol: String! @search(by: [fulltext, term, trigram])
	method: String! @search(by: [fulltext, term, trigram])
	num_chars: String! @search(by: [fulltext, term, trigram])
	redirect_adr: String! @search(by: [fulltext, term, trigram])
	command: Command! 
	host: DNSName!
}

type DNSName {
	id: ID! 
	name: String! @search(by: [fulltext, term, trigram]) @id
	is_cname: Boolean @search
	pointed_to: DNSName @hasInverse(field:points_to)
	points_to: DNSName @hasInverse(field:pointed_to)
	web_dirs: [WebDir!] @hasInverse(field:host)
	machine: [Machine] @hasInverse(field:dns_names)
	command: Command
}


# mutation {
#   addMachine(input: [
#     { 
# 		ip: "192.168.1.1",
# 		dns_names: [
# 			addDNSName(input: [
# 				name: "router.home",
# 				is_cname: false
# 				# ~Machine
# 				]
# 			)
# 		]
# 		ports: [
# 			addDNSName(input: [
# 				port: 80,
# 				state: "open",
# 				protocol: "tcp",
# 				service: "http"
# 			]),
# 			addDNSName(input: [
# 				port: 443,
# 				state: "open",
# 				protocol: "tcp",
# 				service: "https"
# 			]),
# 		]
# 	}
# 	]) {
#     Machine {
#       id
#       ip
#     #   dns_names
#     }
#   }
# }

# {
#   "set": [
#         {
#       "ip": "192.168.1.42",
#       "dns_names": [
#         {
#           "name": "router.home",
#           "is_cname": false,
# 			"dgraph.type": "DNSName"
#         }
#       ],
#       "ports": [
#         {
#           "port": 80,
#           "state": "open",
#           "protocol": "tcp",
#           "service": "http",
# 			"dgraph.type": "Port"
#         },
#         {
#           "port": 443,
#           "state": "open",
#           "protocol": "tcp",
#           "service": "https",
# 			"dgraph.type": "Port"
#         }
#       ],
# 		"dgraph.type": "Machine"	
#     }
#   ]
# }

# curl -H "Content-Type: application/rdf" -X POST 'database.home:8080/mutate?commitNow=true' -d $'
# {
#   set {
#     _:nmap <command> "nmap 192.168.1.1" .
#     _:nmap <local_time> "2022-10-30T22:35:15Z" .
#     _:nmap <dgraph.type> "Command" .
#   }
# }' | python -m json.tool;

# curl -H "Content-Type: application/rdf" -X POST  'database.home:8080/mutate?commitNow=true' \
# -d $'
# {
# 	set {
# 		_:router_name <name> "router.home" .
# 		_:router_name <is_cname> "false"^^<xs:boolean> .
# 		_:router_name <dgraph.type> "DNSName" .
# 	}
# }
# ' | python -m json.tool;

# curl -H "Content-Type: application/rdf" -X POST  'database.home:8080/mutate?commitNow=true' \
# -d $'
# {
# 	set {
# 		_:p1 <port> "80"^^<xs:int> . 
# 		_:p1 <state> "open" .
# 		_:p1 <tl_protocol> "tcp" .
# 		_:p1 <service> "http" .
# 		_:p1 <dgraph.type> "Port" .
# 		_:p2 <port> "443"^^<xs:int> . 
# 		_:p2 <state> "open" .
# 		_:p2 <tl_protocol> "tcp" .
# 		_:p2 <service> "https" .
# 		_:p2 <dgraph.type> "Port" .
#         }
# }
# ' | python -m json.tool;

# curl -H "Content-Type: application/rdf" -X POST  'database.home:8080/mutate?commitNow=true' \
# -d $'
# {
# 	set	{
# 		_:m <ip> "192.168.1.1" . 
# 		_:m <dgraph.type> "Machine" .	
# 	}
# }
# ' | python -m json.tool;

# curl -H "Content-Type: application/rdf" -X POST  'database.home:8080/mutate?commitNow=true' \
# -d $'
# {
# 	set	{
# 		_:m <ip> "192.168.1.42" . 
# 		_:m <dgraph.type> "Machine" .	
# 	}
# }
# ' | python -m json.tool;

# # curl -H "Content-Type: application/graphql" -X POST  'database.home:8080/graphql?commitNow=true' -d $'
# # mutation { 
# # 		updatePort(input: {
# # 			filter: {port: {eq: 80}},
# # 			set: {
# # 				tl_protocol: "tcp"
# # 				}
# # 		}) {
# # 		Port {
# # 			port
# # 		}
# # 	}
# # }
# # ' | python -m json.tool