#!/usr/bin/bash

1-query () {
    curl -H "Content-Type: application/json" database.home:8080/query -XPOST -d '{
        "query": "query test($ip: string, $port: int) {\n response(func: type(Machine)) @filter(eq(Machine.ip, $ip)) @cascade(Machine.ports) {\n Machine.ip \n Machine.ports @filter(eq(Port.port, $port)) {\n Port.port \n } \n } \n }",
        "variables": {"$ip": "'$1'", "$port": "'$2'"}
    }' 2> /dev/null | jq '.data.response'
}

query () {
    # echo "machine: <$1:$2>."
    res="$(1-query $1 $2)"
    # echo $res
    if [ $(echo $res | rg -o $1) ]; then
        echo -e "[LOG] SUCCESS: found => $(echo $res | rg -o $1):$(echo $res | rg -o $2)"
    else 
        echo -n ""
    fi
}

make_queries () {
    net_id="192.168.1"
    # for host_id in {0..255}; do  
    for host_id in "42" "69" "140" "245"; do 
        ip="$net_id.$host_id"
        echo -e "\n\t*** NEW HOST ***\n"
        for port in "22" "42" "80" "443"; do
            echo "[LOG] DEBUG: testing => $ip:$port" 1>&2
            query $ip $port
        done
    done
}

# make_queries 2>&1 | rg -e "found:" 

# make_queries 
# echo "SEPERATOR"
# 1-query "192.168.1.42" "22"

# 1q () {
#     curl -H "Content-Type: application/dql" database.home:8080/query -XPOST -d '{
#         # query {
#             response(func: type(Machine)) 
#             @filter(eq(Machine.ip, ["192.168.1.42", "192.168.1.69"])) 
#             @cascade(Machine.ports) 
#             @normalize 
#             { 
#                 ip: Machine.ip
#                 Machine.ports 
#                 @filter(eq(Port.port, 22)) 
#                 {
#                     port: Port.port
#                 } 
#             }
#         # }
#     }
#     ' 2> /dev/null | jq 
# }

1q () {
    curl -H "Content-Type: application/json" database.home:8080/query -XPOST -d '{
        "query": "query test($ip: string, $port: int) {\n response(func: type(Machine)) @filter(eq(Machine.ip, $ip)) @cascade(Machine.ports) @normalize {\n ip: Machine.ip \n Machine.ports @filter(eq(Port.port, $port)) {\n port: Port.port \n } \n } \n }",
        "variables": {"$ip": "192.168.1.42", "$port": "'$2'"}
    }' 2> /dev/null | jq '.data.response'
}

1q "192.168.1.42" "22"
1q "192.168.1.42" "42"