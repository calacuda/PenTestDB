#!/usr/bin/bash

echo "*** adding DATA ***"

echo "ADDING 192.168.1.69"
# curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
# upsert {
#     query {
#         q1(func: eq(DNSName.name, "dew-drop.home")) {
#             name_id as uid    
#         }
#         q2(func: eq(Machine.ip, "192.168.1.69")) {
#             machine_id as uid    
#         }
#         q3(func: eq(Port.port, 80)) @cascade {
#             port_a_id as uid
#             Port.machine: ~Machine.ports @filter(eq(Machine.ip, "192.168.1.69")) {
#                 uid
#             }
#         }
#         q4(func: eq(Port.port, 443)) @cascade {
#             port_b_id as uid
#             Port.machine: ~Machine.ports @filter(eq(Machine.ip, "192.168.1.69")) {
#                 uid
#             }
#         }
#         q5(func: eq(DNSName.name, "unicornscripts.com")) {
#             cname_id as uid
#         }
#     }
#     mutation @if(eq(len(machine_id), 0) AND eq(len(name_id), 0) AND eq(len(port_a_id), 0) AND eq(len(port_b_id), 0) AND eq(len(cname_id), 0)) {
#         set {
#             _:name <dgraph.type> "DNSName" .
#             _:name <DNSName.name> "dew-drop.home" .
#             _:name <DNSName.is_cname> "false"^^<xs:boolean> .
#             _:machine <dgraph.type> "Machine" .
#             _:machine <Machine.ip> "192.168.1.69" .
#             _:port_a <dgraph.type> "Port" .
#             _:port_a <Port.port> "80"^^<xs:int> .
#             _:port_a <Port.state> "open" .
#             _:port_a <Port.tl_protocol> "tcp" .
#             _:port_a <Port.service> "http" .
#             _:port_b <dgraph.type> "Port" .
#             _:port_b <Port.port> "443"^^<xs:int> .
#             _:port_b <Port.state> "open" .
#             _:port_b <Port.tl_protocol> "tcp" .
#             _:port_b <Port.service> "https" .
#             _:cname_id <dgraph.type> "DNSName" .
#             _:cname_id <DNSName.name> "unicornscripts.com" .
#             _:cname_id <DNSName.is_cname> "true"^^<xs:boolean> .

#             _:cname_id <DNSName.points_to> _:name .
#             _:name <DNSName.pointed_to> _:cname_id .
#             _:port_a <Port.machine> _:machine .            
#             _:port_b <Port.machine> _:machine .            
#             _:machine <Machine.dns_name> _:name .
#             _:machine <Machine.ports> _:port_a .
#             _:machine <Machine.ports> _:port_b .
#             _:name <DNSName.machine> _:machine .
#         }
#     }
# }
# ' | python -m json.tool

curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
upsert {
    query {
        q1(func: eq(DNSName.name, "dew-drop.home")) {
            name_id as uid    
        }
        q2(func: eq(Machine.ip, "192.168.1.69")) {
            machine_id as uid    
        }
        q3(func: uid(machine_id)) @cascade {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 80)) {
                port_a_id as uid
            }
        }
        q4(func: uid(machine_id)) @cascade {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 443)) {
                port_b_id as uid
            }
        }
        q5(func: eq(DNSName.name, "unicornscripts.com")) @cascade {
            cname_id as uid
        }
    }
    mutation @if(eq(len(name_id), 0)) {
        set {
            _:name <dgraph.type> "DNSName" .
            _:name <DNSName.name> "dew-drop.home" .
            _:name <DNSName.is_cname> "false"^^<xs:boolean> .
            _:name <DNSName.machine> _:machine .
        }
    }
     mutation @if(eq(len(name_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:name <Port.machine> _:machine . 
            _:machine <Machine.ports> _:name . 
        }
    }
    mutation @if(eq(len(name_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:name <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:name . 
        }
    }
    mutation @if(eq(len(machine_id), 0)) {
        set {
            _:machine <dgraph.type> "Machine" .
            _:machine <Machine.ip> "192.168.1.69" .
            _:machine <Machine.dns_name> _:name .
            _:machine <Machine.ports> _:port_a .
            _:machine <Machine.ports> _:port_b .
        }
    }
    mutation @if(eq(len(port_a_id), 0)) {
        set {
            _:port_a <Port.port> "80"^^<xs:int> .
            _:port_a <Port.state> "open" .
            _:port_a <Port.tl_protocol> "tcp" .
            _:port_a <Port.service> "http" .
            _:port_a <dgraph.type> "Port" .
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_b_id), 0)) {
        set {
            _:port_b <Port.port> "443"^^<xs:int> .
            _:port_b <Port.state> "open" .
            _:port_b <Port.tl_protocol> "tcp" .
            _:port_b <Port.service> "https" .
            _:port_b <dgraph.type> "Port" .
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_b . 
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_b . 
        }
    }
    mutation @if(eq(len(cname_id), 0)) {
        set {
            _:cname_id <dgraph.type> "DNSName" .
            _:cname_id <DNSName.name> "unicornscripts.com" .
            _:cname_id <DNSName.is_cname> "true"^^<xs:boolean> .
        }
    }
    mutation @if(eq(len(cname_id), 0) AND eq(len(name_id), 0)) {
        set {
            _:cname_id <DNSName.points_to> _:name .
            _:name <DNSName.pointed_to> _:cname_id .
        }
    }
    mutation @if(eq(len(cname_id), 0) AND gt(len(name_id), 0)) {
        set {
            _:cname_id <DNSName.points_to> uid(name_id) .
            uid(name_id) <DNSName.pointed_to> _:cname_id .
        }
    }
}
' | python -m json.tool

echo "ADDING 192.168.1.42"
curl -H "Content-Type: application/rdf" -X POST database.home:8080/mutate?commitNow=true -d  $'
upsert {
    query {
        q1(func: eq(DNSName.name, "blade.home")) {
            name_id as uid    
        }
        q2(func: eq(Machine.ip, "192.168.1.42")) {
            machine_id as uid    
        }
        q3(func: uid(machine_id)) @cascade {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 80)) {
                port_a_id as uid
            }
        }
        q4(func: uid(machine_id)) @cascade {
            Machine.ports: ~Port.machine @filter(eq(Port.port, 443)) {
                port_b_id as uid
            }
        }
    }
    mutation @if(eq(len(name_id), 0)) {
        set {
            _:name <dgraph.type> "DNSName" .
            _:name <DNSName.name> "blade.home" .
            _:name <DNSName.is_cname> "false"^^<xs:boolean> .
            _:name <DNSName.machine> _:machine .
        }
    }
    mutation @if(eq(len(name_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:name <Port.machine> _:machine . 
            _:machine <Machine.ports> _:name . 
        }
    }
    mutation @if(eq(len(name_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:name <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:name . 
        }
    }
    mutation @if(eq(len(machine_id), 0)) {
        set {
            _:machine <dgraph.type> "Machine" .
            _:machine <Machine.ip> "192.168.1.42" .
            _:machine <Machine.dns_name> _:name .
            _:machine <Machine.ports> _:port_a .
            _:machine <Machine.ports> _:port_b .
        }
    }
    mutation @if(eq(len(port_a_id), 0)) {
        set {
            _:port_a <dgraph.type> "Port" .
            _:port_a <Port.port> "80"^^<xs:int> .
            _:port_a <Port.state> "open" .
            _:port_a <Port.tl_protocol> "tcp" .
            _:port_a <Port.service> "http" .
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_a_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_a <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_a . 
        }
    }
    mutation @if(eq(len(port_b_id), 0)) {
        set {
            _:port_b <dgraph.type> "Port" .
            _:port_b <Port.port> "443"^^<xs:int> .
            _:port_b <Port.state> "open" .
            _:port_b <Port.tl_protocol> "tcp" .
            _:port_b <Port.service> "https" .
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND eq(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> _:machine . 
            _:machine <Machine.ports> _:port_b . 
        }
    }
    mutation @if(eq(len(port_b_id), 0) AND gt(len(machine_id), 0)) {
        set {
            _:port_b <Port.machine> uid(machine_id) . 
            uid(machine_id) <Machine.ports> _:port_b . 
        }
    }
}
' | python -m json.tool
